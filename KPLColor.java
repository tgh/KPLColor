/* The following code was generated by JFlex 1.4.2 on 1/14/10 8:43 AM */

/*
 * Copyright Â© 2009 Tyler Hayes <tgh@pdx.edu>
 * ALL RIGHTS RESERVED
 * [This program is licensed under the GPL version 3 or later.]
 * Please see the file COPYING in the source
 * distribution of this software for license terms.
 */

/**
 * @author Tyler Hayes
 * 
 * Color highlighting for Kernel Programming Language (KPL) source code.  Output
 * in HTML.
 */


public class KPLColor extends Object {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 2;
  public static final int BLOCK_COMMENT = 6;
  public static final int YYINITIAL = 0;
  public static final int CHAR = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\12\0\1\2\2\0\1\1\24\0\1\67\4\0\1\22\2\0\1\71"+
    "\1\72\1\0\1\20\1\10\1\70\1\3\1\4\1\11\1\15\2\16"+
    "\1\12\1\13\2\14\7\0\1\6\1\53\1\54\2\6\1\55\1\17"+
    "\1\56\1\41\1\17\1\65\1\17\1\57\1\66\1\64\1\43\1\17"+
    "\1\60\1\35\1\32\2\17\1\62\3\17\1\0\1\21\2\0\1\17"+
    "\1\0\1\24\1\44\1\27\1\50\1\7\1\52\1\42\1\45\1\36"+
    "\1\17\1\47\1\25\1\63\1\30\1\26\1\33\1\17\1\34\1\40"+
    "\1\23\1\51\1\46\1\61\1\5\1\31\1\37\uff85\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\2\2\2\3\2\1\1\3\1\1\1\4"+
    "\21\1\1\5\1\1\2\6\1\1\1\7\1\1\3\6"+
    "\1\7\2\10\1\1\2\0\1\3\4\1\1\3\1\0"+
    "\1\11\7\1\1\12\13\1\1\13\7\1\1\14\5\1"+
    "\1\15\11\1\1\16\1\17\4\3\5\1\1\3\2\20"+
    "\1\1\1\21\15\1\1\22\1\1\1\23\4\1\1\24"+
    "\14\1\1\25\7\1\1\26\6\1\1\0\1\3\1\1"+
    "\1\27\12\1\1\30\1\1\1\3\1\31\1\32\7\1"+
    "\1\33\3\1\1\34\1\35\1\36\11\1\1\37\4\1"+
    "\1\40\2\1\1\41\4\1\1\42\1\1\1\43\5\1"+
    "\3\3\6\1\1\44\12\1\1\3\1\1\1\45\1\46"+
    "\1\1\1\47\2\1\1\50\1\51\1\1\1\52\5\1"+
    "\1\53\4\1\1\54\2\1\1\55\1\1\1\56\2\1"+
    "\1\57\1\60\2\1\1\61\2\1\1\3\2\1\1\62"+
    "\1\63\5\1\1\64\5\1\1\65\1\3\6\1\1\66"+
    "\1\67\1\70\5\1\1\71\1\1\1\72\1\1\1\73"+
    "\1\1\1\74\1\75\1\1\1\76\1\1\1\3\1\77"+
    "\5\1\1\100\5\1\1\3\1\1\1\101\2\1\1\102"+
    "\1\1\1\103\7\1\1\104\1\1\1\105\1\1\1\3"+
    "\1\106\3\1\1\107\4\1\1\110\1\3\3\1\1\111"+
    "\1\112\2\1\1\113\2\1\1\114\1\115\1\116\1\3"+
    "\1\117\3\1\1\120\1\121\1\122\1\3\1\1\1\123"+
    "\1\124\1\125\3\1\1\126\1\3\3\1\1\6\1\127"+
    "\1\1\1\130\1\131\1\1\1\132\1\133\1\0\1\1"+
    "\1\134\2\6\1\135\1\0\1\6";

  private static int [] zzUnpackAction() {
    int [] result = new int[419];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\166\0\261\0\354\0\u0127\0\354\0\u0162"+
    "\0\u019d\0\u01d8\0\u0213\0\u024e\0\u0289\0\354\0\u02c4\0\u02ff"+
    "\0\u033a\0\u0375\0\u03b0\0\u03eb\0\u0426\0\u0461\0\u049c\0\u04d7"+
    "\0\u0512\0\u054d\0\u0588\0\u05c3\0\u05fe\0\u0639\0\u0674\0\354"+
    "\0\u06af\0\u06ea\0\354\0\u0725\0\354\0\u0760\0\u079b\0\u0760"+
    "\0\u07d6\0\u0760\0\u0811\0\354\0\u084c\0\u0887\0\u08c2\0\u08fd"+
    "\0\u0938\0\u0973\0\u09ae\0\u09e9\0\u0a24\0\u0a5f\0\u01d8\0\u0a9a"+
    "\0\u0ad5\0\u0b10\0\u0b4b\0\u0b86\0\u0bc1\0\u0bfc\0\u01d8\0\u0c37"+
    "\0\u0c72\0\u0cad\0\u0ce8\0\u0d23\0\u0d5e\0\u0d99\0\u0dd4\0\u0e0f"+
    "\0\u0e4a\0\u0e85\0\u01d8\0\u0ec0\0\u0efb\0\u0f36\0\u0f71\0\u0fac"+
    "\0\u0fe7\0\u1022\0\u01d8\0\u105d\0\u1098\0\u10d3\0\u110e\0\u1149"+
    "\0\u1184\0\u11bf\0\u11fa\0\u1235\0\u1270\0\u12ab\0\u12e6\0\u1321"+
    "\0\u135c\0\u1397\0\354\0\354\0\u0887\0\u13d2\0\u140d\0\u1448"+
    "\0\u1483\0\u14be\0\u14f9\0\u1534\0\u156f\0\u15aa\0\u15e5\0\354"+
    "\0\u1620\0\u01d8\0\u165b\0\u1696\0\u16d1\0\u170c\0\u1747\0\u1782"+
    "\0\u17bd\0\u17f8\0\u1833\0\u186e\0\u18a9\0\u18e4\0\u191f\0\u01d8"+
    "\0\u195a\0\u01d8\0\u1995\0\u19d0\0\u1a0b\0\u1a46\0\u1a81\0\u1abc"+
    "\0\u1af7\0\u1b32\0\u1b6d\0\u1ba8\0\u1be3\0\u1c1e\0\u1c59\0\u1c94"+
    "\0\u1ccf\0\u1d0a\0\u1d45\0\u01d8\0\u1d80\0\u1dbb\0\u1df6\0\u1e31"+
    "\0\u1e6c\0\u1ea7\0\u1ee2\0\u01d8\0\u1f1d\0\u1f58\0\u1f93\0\u1fce"+
    "\0\u2009\0\u2044\0\u207f\0\u20ba\0\u20f5\0\u2130\0\u216b\0\u21a6"+
    "\0\u21e1\0\u221c\0\u2257\0\u2292\0\u22cd\0\u2308\0\u2343\0\u237e"+
    "\0\u01d8\0\u23b9\0\u23f4\0\u242f\0\u01d8\0\u246a\0\u24a5\0\u24e0"+
    "\0\u251b\0\u2556\0\u2591\0\u25cc\0\u01d8\0\u2607\0\u2642\0\u267d"+
    "\0\u01d8\0\u01d8\0\u01d8\0\u26b8\0\u26f3\0\u272e\0\u2769\0\u27a4"+
    "\0\u27df\0\u281a\0\u2855\0\u2890\0\u01d8\0\u28cb\0\u2906\0\u2941"+
    "\0\u297c\0\u01d8\0\u29b7\0\u29f2\0\u01d8\0\u2a2d\0\u2a68\0\u2aa3"+
    "\0\u2ade\0\u01d8\0\u2b19\0\u01d8\0\u2b54\0\u2b8f\0\u2bca\0\u2c05"+
    "\0\u2c40\0\354\0\u2c7b\0\u2cb6\0\u2cf1\0\u2d2c\0\u2d67\0\u2da2"+
    "\0\u2ddd\0\u2e18\0\u01d8\0\u2e53\0\u2e8e\0\u2ec9\0\u2f04\0\u2f3f"+
    "\0\u2f7a\0\u2fb5\0\u2ff0\0\u302b\0\u3066\0\u30a1\0\u30dc\0\u01d8"+
    "\0\u01d8\0\u3117\0\u3152\0\u318d\0\u31c8\0\u01d8\0\u01d8\0\u3203"+
    "\0\u01d8\0\u323e\0\u3279\0\u32b4\0\u32ef\0\u332a\0\u01d8\0\u3365"+
    "\0\u33a0\0\u33db\0\u3416\0\u3451\0\u348c\0\u34c7\0\u01d8\0\u3502"+
    "\0\u01d8\0\u353d\0\u3578\0\u01d8\0\u01d8\0\u35b3\0\u35ee\0\u01d8"+
    "\0\u3629\0\u3664\0\u369f\0\u36da\0\u3715\0\u01d8\0\u01d8\0\u3750"+
    "\0\u378b\0\u37c6\0\u3801\0\u383c\0\u01d8\0\u3877\0\u38b2\0\u38ed"+
    "\0\u3928\0\u3963\0\u01d8\0\u399e\0\u39d9\0\u3a14\0\u3a4f\0\u3a8a"+
    "\0\u3ac5\0\u3b00\0\u01d8\0\u3b3b\0\u01d8\0\u3b76\0\u3bb1\0\u3bec"+
    "\0\u3c27\0\u3c62\0\u01d8\0\u3c9d\0\u01d8\0\u3cd8\0\u01d8\0\u3d13"+
    "\0\u01d8\0\u01d8\0\u3d4e\0\u3d89\0\u3dc4\0\u3dff\0\u01d8\0\u3e3a"+
    "\0\u3e75\0\u3eb0\0\u3eeb\0\u3f26\0\u01d8\0\u3f61\0\u3f9c\0\u3fd7"+
    "\0\u4012\0\u404d\0\u4088\0\u40c3\0\u01d8\0\u40fe\0\u4139\0\u01d8"+
    "\0\u4174\0\u01d8\0\u41af\0\u41ea\0\u4225\0\u4260\0\u429b\0\u42d6"+
    "\0\u4311\0\u01d8\0\u434c\0\u01d8\0\u4387\0\u43c2\0\u01d8\0\u43fd"+
    "\0\u4438\0\u4473\0\u01d8\0\u44ae\0\u44e9\0\u4524\0\u455f\0\u01d8"+
    "\0\u459a\0\u45d5\0\u4610\0\u464b\0\u01d8\0\u01d8\0\u4686\0\u46c1"+
    "\0\u01d8\0\u46fc\0\u4737\0\u01d8\0\u4772\0\u01d8\0\u47ad\0\u01d8"+
    "\0\u47e8\0\u4823\0\u485e\0\u01d8\0\u01d8\0\u01d8\0\u4899\0\u48d4"+
    "\0\u01d8\0\u01d8\0\u01d8\0\u490f\0\u494a\0\u4985\0\u01d8\0\u49c0"+
    "\0\u49fb\0\u4a36\0\u4a71\0\u4aac\0\u01d8\0\u4ae7\0\u01d8\0\u01d8"+
    "\0\u4b22\0\u01d8\0\u01d8\0\u4b5d\0\u4b98\0\u01d8\0\u4bd3\0\u4c0e"+
    "\0\u01d8\0\u4c49\0\u4c84";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[419];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\1\7\1\10\1\11\2\12\1\13\1\5"+
    "\6\14\1\12\1\15\1\5\1\16\1\17\1\20\1\12"+
    "\1\21\1\22\1\23\2\12\1\24\1\25\1\12\1\26"+
    "\1\12\1\27\3\12\1\30\1\31\1\32\1\12\1\33"+
    "\1\34\1\35\6\12\1\36\1\12\1\37\3\12\1\40"+
    "\1\41\3\5\1\42\1\43\16\5\1\44\45\5\1\45"+
    "\3\5\1\46\1\47\1\50\5\46\1\50\10\46\1\51"+
    "\1\52\47\46\1\50\1\5\1\53\1\54\66\5\1\55"+
    "\1\5\75\0\1\7\75\0\1\56\2\0\1\57\65\0"+
    "\2\60\3\0\1\57\6\60\57\0\5\12\1\0\7\12"+
    "\3\0\44\12\7\0\2\12\1\61\2\12\1\0\7\12"+
    "\3\0\2\12\1\62\2\12\1\63\3\12\1\64\32\12"+
    "\7\0\1\60\1\65\3\0\1\57\6\65\74\0\1\66"+
    "\55\0\5\12\1\0\7\12\3\0\3\12\1\67\2\12"+
    "\1\70\2\12\1\71\10\12\1\72\21\12\7\0\5\12"+
    "\1\0\7\12\3\0\2\12\1\73\2\12\1\74\3\12"+
    "\1\75\3\12\1\76\26\12\7\0\5\12\1\0\7\12"+
    "\3\0\27\12\1\77\14\12\7\0\5\12\1\0\7\12"+
    "\3\0\1\12\1\100\1\101\1\102\16\12\1\103\21\12"+
    "\7\0\4\12\1\104\1\0\7\12\3\0\26\12\1\105"+
    "\15\12\7\0\5\12\1\0\7\12\3\0\1\106\10\12"+
    "\1\107\32\12\7\0\4\12\1\110\1\0\7\12\3\0"+
    "\44\12\7\0\5\12\1\0\7\12\3\0\5\12\1\111"+
    "\7\12\1\112\11\12\1\113\10\12\1\114\3\12\7\0"+
    "\4\12\1\115\1\0\7\12\3\0\13\12\1\116\12\12"+
    "\1\117\7\12\1\120\5\12\7\0\4\12\1\121\1\0"+
    "\7\12\3\0\3\12\1\122\2\12\1\123\2\12\1\124"+
    "\32\12\7\0\4\12\1\125\1\0\7\12\3\0\44\12"+
    "\7\0\5\12\1\0\7\12\3\0\1\12\1\126\1\12"+
    "\1\127\40\12\7\0\4\12\1\130\1\0\7\12\3\0"+
    "\3\12\1\131\40\12\7\0\5\12\1\0\7\12\3\0"+
    "\5\12\1\132\7\12\1\133\26\12\7\0\5\12\1\0"+
    "\7\12\3\0\1\12\1\134\1\12\1\135\5\12\1\136"+
    "\1\12\1\137\12\12\1\140\15\12\7\0\5\12\1\0"+
    "\7\12\3\0\22\12\1\141\21\12\7\0\4\12\1\142"+
    "\1\0\7\12\3\0\44\12\75\0\1\143\3\0\1\43"+
    "\70\0\3\43\1\144\15\43\3\144\4\43\1\144\36\43"+
    "\1\144\3\43\10\0\1\43\61\0\1\43\2\0\1\43"+
    "\5\0\1\43\61\0\4\43\1\0\15\43\3\0\4\43"+
    "\1\0\36\43\1\0\3\43\2\0\1\54\160\0\1\45"+
    "\5\0\2\145\1\0\2\145\1\0\6\145\5\0\1\145"+
    "\2\0\1\145\14\0\1\145\3\0\1\145\1\0\4\145"+
    "\20\0\1\146\1\147\4\0\6\147\57\0\2\150\3\0"+
    "\1\57\6\150\57\0\5\12\1\0\7\12\3\0\1\151"+
    "\43\12\7\0\5\12\1\0\7\12\3\0\15\12\1\152"+
    "\26\12\7\0\5\12\1\0\7\12\3\0\25\12\1\153"+
    "\1\154\15\12\7\0\5\12\1\0\7\12\3\0\11\12"+
    "\1\155\32\12\7\0\2\150\3\0\1\57\1\150\3\156"+
    "\1\150\1\156\54\0\1\66\1\157\1\160\70\66\3\0"+
    "\5\12\1\0\7\12\3\0\10\12\1\161\33\12\7\0"+
    "\5\12\1\0\7\12\3\0\6\12\1\162\17\12\1\163"+
    "\15\12\7\0\5\12\1\0\7\12\3\0\11\12\1\164"+
    "\32\12\7\0\5\12\1\0\7\12\3\0\2\12\1\165"+
    "\41\12\7\0\5\12\1\0\7\12\3\0\6\12\1\166"+
    "\35\12\7\0\5\12\1\0\7\12\3\0\11\12\1\167"+
    "\32\12\7\0\5\12\1\0\7\12\3\0\16\12\1\170"+
    "\1\12\1\171\23\12\7\0\5\12\1\0\7\12\3\0"+
    "\1\172\14\12\1\173\26\12\7\0\5\12\1\0\7\12"+
    "\3\0\1\12\1\174\42\12\7\0\5\12\1\0\7\12"+
    "\3\0\5\12\1\175\17\12\1\176\16\12\7\0\5\12"+
    "\1\0\7\12\3\0\1\12\1\177\42\12\7\0\5\12"+
    "\1\0\7\12\3\0\36\12\1\200\5\12\7\0\5\12"+
    "\1\0\7\12\3\0\2\12\1\201\41\12\7\0\5\12"+
    "\1\0\7\12\3\0\11\12\1\202\32\12\7\0\4\12"+
    "\1\203\1\0\7\12\3\0\44\12\7\0\5\12\1\0"+
    "\7\12\3\0\1\204\3\12\1\205\1\206\36\12\7\0"+
    "\5\12\1\0\7\12\3\0\1\207\26\12\1\210\14\12"+
    "\7\0\5\12\1\0\7\12\3\0\16\12\1\211\23\12"+
    "\1\212\1\12\7\0\5\12\1\0\7\12\3\0\10\12"+
    "\1\213\33\12\7\0\5\12\1\0\7\12\3\0\2\12"+
    "\1\214\41\12\7\0\5\12\1\0\7\12\3\0\14\12"+
    "\1\215\27\12\7\0\5\12\1\0\7\12\3\0\10\12"+
    "\1\216\33\12\7\0\5\12\1\0\7\12\3\0\13\12"+
    "\1\217\30\12\7\0\5\12\1\0\7\12\3\0\22\12"+
    "\1\220\21\12\7\0\5\12\1\0\7\12\3\0\3\12"+
    "\1\221\40\12\7\0\4\12\1\222\1\0\7\12\3\0"+
    "\44\12\7\0\5\12\1\0\7\12\3\0\1\12\1\223"+
    "\42\12\7\0\5\12\1\0\7\12\3\0\11\12\1\224"+
    "\32\12\7\0\5\12\1\0\7\12\3\0\13\12\1\225"+
    "\30\12\7\0\5\12\1\0\7\12\3\0\21\12\1\226"+
    "\5\12\1\227\14\12\7\0\5\12\1\0\7\12\3\0"+
    "\26\12\1\230\15\12\7\0\5\12\1\0\7\12\3\0"+
    "\1\231\43\12\7\0\4\12\1\232\1\0\7\12\3\0"+
    "\44\12\7\0\5\12\1\0\7\12\3\0\2\12\1\233"+
    "\41\12\7\0\5\12\1\0\7\12\3\0\11\12\1\234"+
    "\32\12\7\0\4\12\1\235\1\0\7\12\3\0\44\12"+
    "\7\0\4\12\1\236\1\0\7\12\3\0\44\12\7\0"+
    "\5\12\1\0\7\12\3\0\5\12\1\237\36\12\7\0"+
    "\5\12\1\0\7\12\3\0\13\12\1\240\30\12\7\0"+
    "\5\12\1\0\7\12\3\0\1\241\14\12\1\242\26\12"+
    "\13\0\1\243\66\0\2\147\2\0\1\243\1\0\6\147"+
    "\57\0\2\244\3\0\1\57\6\244\57\0\4\12\1\245"+
    "\1\0\7\12\3\0\44\12\7\0\4\12\1\246\1\0"+
    "\7\12\3\0\44\12\7\0\5\12\1\0\7\12\3\0"+
    "\7\12\1\247\2\12\1\250\3\12\1\251\11\12\1\252"+
    "\1\253\1\254\1\255\1\256\1\257\1\12\1\260\4\12"+
    "\7\0\5\12\1\0\7\12\3\0\40\12\1\261\3\12"+
    "\7\0\5\12\1\0\7\12\3\0\3\12\1\262\40\12"+
    "\7\0\2\244\3\0\1\57\2\244\2\263\2\244\56\0"+
    "\1\160\73\0\4\12\1\264\1\0\7\12\3\0\44\12"+
    "\7\0\4\12\1\265\1\0\7\12\3\0\44\12\7\0"+
    "\5\12\1\0\7\12\3\0\3\12\1\266\40\12\7\0"+
    "\5\12\1\0\7\12\3\0\3\12\1\267\40\12\7\0"+
    "\5\12\1\0\7\12\3\0\7\12\1\270\34\12\7\0"+
    "\5\12\1\0\7\12\3\0\1\12\1\271\42\12\7\0"+
    "\5\12\1\0\7\12\3\0\5\12\1\272\36\12\7\0"+
    "\5\12\1\0\7\12\3\0\1\273\43\12\7\0\5\12"+
    "\1\0\7\12\3\0\4\12\1\274\37\12\7\0\4\12"+
    "\1\275\1\0\7\12\3\0\44\12\7\0\5\12\1\0"+
    "\7\12\3\0\15\12\1\276\26\12\7\0\5\12\1\0"+
    "\7\12\3\0\1\277\14\12\1\300\26\12\7\0\4\12"+
    "\1\301\1\0\7\12\3\0\44\12\7\0\5\12\1\0"+
    "\7\12\3\0\11\12\1\302\32\12\7\0\5\12\1\0"+
    "\7\12\3\0\2\12\1\303\41\12\7\0\5\12\1\0"+
    "\7\12\3\0\27\12\1\304\14\12\7\0\5\12\1\0"+
    "\7\12\3\0\26\12\1\305\15\12\7\0\5\12\1\0"+
    "\7\12\3\0\3\12\1\306\40\12\7\0\5\12\1\0"+
    "\7\12\3\0\1\12\1\307\42\12\7\0\4\12\1\310"+
    "\1\0\7\12\3\0\44\12\7\0\5\12\1\0\7\12"+
    "\3\0\13\12\1\311\30\12\7\0\5\12\1\0\7\12"+
    "\3\0\5\12\1\312\36\12\7\0\5\12\1\0\7\12"+
    "\3\0\13\12\1\313\30\12\7\0\5\12\1\0\7\12"+
    "\3\0\2\12\1\314\41\12\7\0\5\12\1\0\7\12"+
    "\3\0\27\12\1\315\14\12\7\0\4\12\1\316\1\0"+
    "\7\12\3\0\44\12\7\0\4\12\1\317\1\0\7\12"+
    "\3\0\44\12\7\0\5\12\1\0\7\12\3\0\1\320"+
    "\43\12\7\0\5\12\1\0\7\12\3\0\1\12\1\321"+
    "\42\12\7\0\5\12\1\0\7\12\3\0\2\12\1\322"+
    "\41\12\7\0\5\12\1\0\7\12\3\0\1\12\1\323"+
    "\42\12\7\0\5\12\1\0\7\12\3\0\25\12\1\324"+
    "\16\12\7\0\5\12\1\0\7\12\3\0\25\12\1\325"+
    "\16\12\7\0\5\12\1\0\7\12\3\0\26\12\1\326"+
    "\15\12\7\0\5\12\1\0\7\12\3\0\1\12\1\327"+
    "\42\12\7\0\5\12\1\0\7\12\3\0\21\12\1\330"+
    "\22\12\7\0\5\12\1\0\7\12\3\0\13\12\1\331"+
    "\30\12\7\0\5\12\1\0\7\12\3\0\15\12\1\332"+
    "\26\12\7\0\5\12\1\0\7\12\3\0\15\12\1\333"+
    "\26\12\7\0\4\12\1\334\1\0\7\12\3\0\44\12"+
    "\7\0\5\12\1\0\7\12\3\0\2\12\1\335\41\12"+
    "\7\0\5\12\1\0\7\12\3\0\4\12\1\336\37\12"+
    "\7\0\5\12\1\0\7\12\3\0\2\12\1\337\41\12"+
    "\7\0\5\12\1\0\7\12\3\0\22\12\1\340\21\12"+
    "\7\0\5\12\1\0\7\12\3\0\15\12\1\341\26\12"+
    "\7\0\1\342\1\343\4\0\6\343\57\0\2\344\3\0"+
    "\1\57\6\344\57\0\5\12\1\0\7\12\3\0\5\12"+
    "\1\345\3\12\1\346\32\12\7\0\5\12\1\0\7\12"+
    "\3\0\16\12\1\347\25\12\7\0\5\12\1\0\7\12"+
    "\3\0\11\12\1\350\32\12\7\0\5\12\1\0\7\12"+
    "\3\0\36\12\1\351\5\12\7\0\5\12\1\0\7\12"+
    "\3\0\5\12\1\352\21\12\1\353\14\12\7\0\4\12"+
    "\1\354\1\0\7\12\3\0\44\12\7\0\5\12\1\0"+
    "\7\12\3\0\2\12\1\355\1\356\40\12\7\0\5\12"+
    "\1\0\7\12\3\0\3\12\1\357\22\12\1\360\15\12"+
    "\7\0\4\12\1\361\1\0\7\12\3\0\44\12\7\0"+
    "\4\12\1\362\1\0\7\12\3\0\44\12\7\0\4\12"+
    "\1\363\1\0\7\12\3\0\44\12\7\0\5\12\1\0"+
    "\7\12\3\0\22\12\1\364\21\12\7\0\5\12\1\0"+
    "\7\12\3\0\11\12\1\365\32\12\7\0\2\344\3\0"+
    "\1\57\1\344\3\366\1\344\1\366\57\0\5\12\1\0"+
    "\7\12\3\0\41\12\1\367\2\12\7\0\5\12\1\0"+
    "\7\12\3\0\36\12\1\370\5\12\7\0\5\12\1\0"+
    "\7\12\3\0\4\12\1\371\37\12\7\0\5\12\1\0"+
    "\7\12\3\0\6\12\1\372\35\12\7\0\5\12\1\0"+
    "\7\12\3\0\6\12\1\373\35\12\7\0\5\12\1\0"+
    "\7\12\3\0\1\374\43\12\7\0\5\12\1\0\7\12"+
    "\3\0\11\12\1\375\32\12\7\0\5\12\1\0\7\12"+
    "\3\0\22\12\1\376\21\12\7\0\5\12\1\0\7\12"+
    "\3\0\15\12\1\377\26\12\7\0\5\12\1\0\7\12"+
    "\3\0\13\12\1\u0100\30\12\7\0\5\12\1\0\7\12"+
    "\3\0\1\u0101\43\12\7\0\5\12\1\0\7\12\3\0"+
    "\13\12\1\u0102\30\12\7\0\5\12\1\0\7\12\3\0"+
    "\11\12\1\u0103\32\12\7\0\5\12\1\0\7\12\3\0"+
    "\11\12\1\u0104\32\12\7\0\5\12\1\0\7\12\3\0"+
    "\40\12\1\u0105\3\12\7\0\5\12\1\0\7\12\3\0"+
    "\11\12\1\u0106\32\12\7\0\2\12\1\u0107\2\12\1\0"+
    "\7\12\3\0\44\12\7\0\5\12\1\0\7\12\3\0"+
    "\15\12\1\u0108\26\12\7\0\5\12\1\0\7\12\3\0"+
    "\5\12\1\u0109\36\12\7\0\4\12\1\u010a\1\0\7\12"+
    "\3\0\44\12\7\0\5\12\1\0\7\12\3\0\41\12"+
    "\1\u010b\2\12\7\0\5\12\1\0\7\12\3\0\11\12"+
    "\1\u010c\32\12\7\0\5\12\1\0\7\12\3\0\4\12"+
    "\1\u010d\37\12\7\0\5\12\1\0\7\12\3\0\23\12"+
    "\1\u010e\20\12\7\0\5\12\1\0\7\12\3\0\24\12"+
    "\1\u010f\17\12\7\0\4\12\1\u0110\1\0\7\12\3\0"+
    "\44\12\7\0\5\12\1\0\7\12\3\0\17\12\1\u0111"+
    "\24\12\7\0\5\12\1\0\7\12\3\0\26\12\1\u0112"+
    "\15\12\7\0\5\12\1\0\7\12\3\0\2\12\1\u0113"+
    "\41\12\7\0\5\12\1\0\7\12\3\0\2\12\1\u0114"+
    "\41\12\7\0\4\12\1\u0115\1\0\7\12\3\0\44\12"+
    "\7\0\5\12\1\0\7\12\3\0\25\12\1\u0116\16\12"+
    "\7\0\5\12\1\0\7\12\3\0\1\u0117\43\12\7\0"+
    "\4\12\1\u0118\1\0\7\12\3\0\44\12\7\0\5\12"+
    "\1\0\7\12\3\0\3\12\1\u0119\40\12\7\0\5\12"+
    "\1\0\7\12\3\0\1\12\1\u011a\42\12\7\0\2\343"+
    "\4\0\6\343\57\0\2\u011b\3\0\1\57\6\u011b\57\0"+
    "\5\12\1\0\7\12\3\0\25\12\1\u011c\16\12\7\0"+
    "\5\12\1\0\7\12\3\0\5\12\1\u011d\36\12\7\0"+
    "\5\12\1\0\7\12\3\0\27\12\1\u011e\14\12\7\0"+
    "\5\12\1\0\7\12\3\0\6\12\1\u011f\35\12\7\0"+
    "\5\12\1\0\7\12\3\0\13\12\1\u0120\30\12\7\0"+
    "\5\12\1\0\7\12\3\0\1\u0121\43\12\7\0\5\12"+
    "\1\0\7\12\3\0\22\12\1\u0122\21\12\7\0\5\12"+
    "\1\0\7\12\3\0\1\12\1\u0123\42\12\7\0\5\12"+
    "\1\0\7\12\3\0\25\12\1\u0124\16\12\7\0\5\12"+
    "\1\0\7\12\3\0\11\12\1\u0125\32\12\7\0\5\12"+
    "\1\0\7\12\3\0\5\12\1\u0126\36\12\7\0\5\12"+
    "\1\0\7\12\3\0\1\12\1\u0127\42\12\7\0\5\12"+
    "\1\0\7\12\3\0\1\u0128\43\12\7\0\5\12\1\0"+
    "\7\12\3\0\4\12\1\u0129\37\12\7\0\5\12\1\0"+
    "\7\12\3\0\13\12\1\u012a\30\12\7\0\5\12\1\0"+
    "\7\12\3\0\15\12\1\u012b\26\12\7\0\2\u011b\3\0"+
    "\1\57\3\u011b\1\u012c\2\u011b\57\0\5\12\1\0\7\12"+
    "\3\0\27\12\1\u012d\14\12\7\0\5\12\1\0\7\12"+
    "\3\0\10\12\1\u012e\33\12\7\0\5\12\1\0\7\12"+
    "\3\0\12\12\1\u012f\31\12\7\0\4\12\1\u0130\1\0"+
    "\7\12\3\0\44\12\7\0\5\12\1\0\7\12\3\0"+
    "\7\12\1\u0131\34\12\7\0\5\12\1\0\7\12\3\0"+
    "\5\12\1\u0132\36\12\7\0\2\12\1\u0133\2\12\1\0"+
    "\7\12\3\0\44\12\7\0\5\12\1\0\7\12\3\0"+
    "\5\12\1\u0134\36\12\7\0\5\12\1\0\7\12\3\0"+
    "\25\12\1\u0135\16\12\7\0\5\12\1\0\7\12\3\0"+
    "\13\12\1\u0136\30\12\7\0\5\12\1\0\7\12\3\0"+
    "\27\12\1\u0137\14\12\7\0\5\12\1\0\7\12\3\0"+
    "\1\u0138\43\12\7\0\5\12\1\0\7\12\3\0\25\12"+
    "\1\u0139\16\12\7\0\5\12\1\0\7\12\3\0\40\12"+
    "\1\u013a\3\12\7\0\5\12\1\0\7\12\3\0\27\12"+
    "\1\u013b\14\12\7\0\5\12\1\0\7\12\3\0\4\12"+
    "\1\u013c\37\12\7\0\5\12\1\0\7\12\3\0\22\12"+
    "\1\u013d\21\12\7\0\5\12\1\0\7\12\3\0\13\12"+
    "\1\u013e\30\12\7\0\5\12\1\0\7\12\3\0\11\12"+
    "\1\u013f\32\12\7\0\5\12\1\0\7\12\3\0\2\12"+
    "\1\u0140\41\12\7\0\4\12\1\u0141\1\0\7\12\3\0"+
    "\44\12\7\0\5\12\1\0\7\12\3\0\15\12\1\u0142"+
    "\26\12\7\0\5\12\1\0\7\12\3\0\13\12\1\u0143"+
    "\30\12\7\0\5\12\1\0\7\12\3\0\25\12\1\u0144"+
    "\16\12\7\0\5\12\1\0\7\12\3\0\17\12\1\u0145"+
    "\24\12\7\0\2\u0146\3\0\1\57\6\u0146\57\0\5\12"+
    "\1\0\7\12\3\0\15\12\1\u0147\26\12\7\0\5\12"+
    "\1\0\7\12\3\0\1\12\1\u0148\42\12\7\0\5\12"+
    "\1\0\7\12\3\0\1\u0149\43\12\7\0\4\12\1\u014a"+
    "\1\0\7\12\3\0\44\12\7\0\5\12\1\0\7\12"+
    "\3\0\1\12\1\u014b\42\12\7\0\5\12\1\0\7\12"+
    "\3\0\15\12\1\u014c\26\12\7\0\4\12\1\u014d\1\0"+
    "\7\12\3\0\44\12\7\0\5\12\1\0\7\12\3\0"+
    "\4\12\1\u014e\37\12\7\0\5\12\1\0\7\12\3\0"+
    "\25\12\1\u014f\16\12\7\0\5\12\1\0\7\12\3\0"+
    "\22\12\1\u0150\21\12\7\0\5\12\1\0\7\12\3\0"+
    "\3\12\1\u0151\40\12\7\0\5\12\1\0\7\12\3\0"+
    "\2\12\1\u0152\41\12\7\0\2\u0146\3\0\1\57\4\u0146"+
    "\2\u0153\57\0\5\12\1\0\7\12\3\0\43\12\1\u0154"+
    "\7\0\4\12\1\u0155\1\0\7\12\3\0\44\12\7\0"+
    "\5\12\1\0\7\12\3\0\13\12\1\u0156\30\12\7\0"+
    "\5\12\1\0\7\12\3\0\17\12\1\u0157\24\12\7\0"+
    "\5\12\1\0\7\12\3\0\3\12\1\u0158\40\12\7\0"+
    "\5\12\1\0\7\12\3\0\26\12\1\u0159\15\12\7\0"+
    "\5\12\1\0\7\12\3\0\15\12\1\u015a\26\12\7\0"+
    "\5\12\1\0\7\12\3\0\5\12\1\u015b\36\12\7\0"+
    "\5\12\1\0\7\12\3\0\1\12\1\u015c\42\12\7\0"+
    "\5\12\1\0\7\12\3\0\1\12\1\u015d\42\12\7\0"+
    "\5\12\1\0\7\12\3\0\41\12\1\u015e\2\12\7\0"+
    "\4\12\1\u015f\1\0\7\12\3\0\44\12\7\0\5\12"+
    "\1\0\7\12\3\0\2\12\1\u0160\41\12\7\0\5\12"+
    "\1\0\7\12\3\0\3\12\1\u0161\40\12\7\0\5\12"+
    "\1\0\7\12\3\0\1\u0162\43\12\7\0\5\12\1\0"+
    "\7\12\3\0\3\12\1\u0163\40\12\7\0\5\12\1\0"+
    "\7\12\3\0\15\12\1\u0164\26\12\7\0\4\12\1\u0165"+
    "\1\0\7\12\3\0\44\12\7\0\2\u0166\3\0\1\57"+
    "\6\u0166\57\0\5\12\1\0\7\12\3\0\2\12\1\u0167"+
    "\41\12\7\0\5\12\1\0\7\12\3\0\4\12\1\u0168"+
    "\37\12\7\0\5\12\1\0\7\12\3\0\11\12\1\u0169"+
    "\32\12\7\0\5\12\1\0\7\12\3\0\23\12\1\u016a"+
    "\20\12\7\0\5\12\1\0\7\12\3\0\15\12\1\u016b"+
    "\26\12\7\0\5\12\1\0\7\12\3\0\1\u016c\43\12"+
    "\7\0\4\12\1\u016d\1\0\7\12\3\0\44\12\7\0"+
    "\5\12\1\0\7\12\3\0\3\12\1\u016e\40\12\7\0"+
    "\5\12\1\0\7\12\3\0\11\12\1\u016f\32\12\7\0"+
    "\4\12\1\u0170\1\0\7\12\3\0\44\12\7\0\2\u0166"+
    "\3\0\1\57\1\u0166\3\u0171\2\u0166\57\0\5\12\1\0"+
    "\7\12\3\0\26\12\1\u0172\15\12\7\0\5\12\1\0"+
    "\7\12\3\0\14\12\1\u0173\27\12\7\0\4\12\1\u0174"+
    "\1\0\7\12\3\0\44\12\7\0\4\12\1\u0175\1\0"+
    "\7\12\3\0\44\12\7\0\5\12\1\0\7\12\3\0"+
    "\17\12\1\u0176\24\12\7\0\5\12\1\0\7\12\3\0"+
    "\4\12\1\u0177\37\12\7\0\5\12\1\0\7\12\3\0"+
    "\5\12\1\u0178\36\12\7\0\5\12\1\0\7\12\3\0"+
    "\27\12\1\u0179\14\12\7\0\5\12\1\0\7\12\3\0"+
    "\5\12\1\u017a\36\12\7\0\5\12\1\0\7\12\3\0"+
    "\1\12\1\u017b\42\12\7\0\5\12\1\0\7\12\3\0"+
    "\11\12\1\u017c\32\12\7\0\5\12\1\0\7\12\3\0"+
    "\5\12\1\u017d\36\12\7\0\5\12\1\0\7\12\3\0"+
    "\15\12\1\u017e\26\12\7\0\2\u017f\3\0\1\57\6\u017f"+
    "\57\0\5\12\1\0\7\12\3\0\22\12\1\u0180\21\12"+
    "\7\0\5\12\1\0\7\12\3\0\27\12\1\u0181\14\12"+
    "\7\0\5\12\1\0\7\12\3\0\13\12\1\u0182\30\12"+
    "\7\0\5\12\1\0\7\12\3\0\13\12\1\u0183\30\12"+
    "\7\0\5\12\1\0\7\12\3\0\11\12\1\u0184\32\12"+
    "\7\0\5\12\1\0\7\12\3\0\25\12\1\u0185\16\12"+
    "\7\0\5\12\1\0\7\12\3\0\25\12\1\u0186\16\12"+
    "\7\0\2\u017f\3\0\1\57\1\u017f\3\u0187\1\u017f\1\u0187"+
    "\57\0\5\12\1\0\7\12\3\0\2\12\1\u0188\41\12"+
    "\7\0\4\12\1\u0189\1\0\7\12\3\0\44\12\7\0"+
    "\5\12\1\0\7\12\3\0\11\12\1\u018a\32\12\7\0"+
    "\4\12\1\u018b\1\0\7\12\3\0\44\12\7\0\5\12"+
    "\1\0\7\12\3\0\4\12\1\u018c\37\12\7\0\5\12"+
    "\1\0\7\12\3\0\1\u018d\43\12\7\0\5\12\1\0"+
    "\7\12\3\0\15\12\1\u018e\26\12\7\0\5\12\1\0"+
    "\7\12\3\0\15\12\1\u018f\26\12\7\0\2\u0190\3\0"+
    "\1\57\6\u0190\57\0\5\12\1\0\7\12\3\0\1\12"+
    "\1\u0191\42\12\7\0\5\12\1\0\7\12\3\0\3\12"+
    "\1\u0192\40\12\7\0\5\12\1\0\7\12\3\0\3\12"+
    "\1\u0193\40\12\7\0\2\u0190\3\0\1\57\3\u0190\1\u0194"+
    "\2\u0190\57\0\5\12\1\0\7\12\3\0\2\12\1\u0195"+
    "\41\12\7\0\4\12\1\u0196\1\0\7\12\3\0\44\12"+
    "\7\0\5\12\1\0\7\12\3\0\15\12\1\u0197\26\12"+
    "\7\0\5\12\1\0\7\12\3\0\15\12\1\u0198\26\12"+
    "\7\0\2\u0194\3\0\1\57\6\u0194\57\0\5\12\1\0"+
    "\7\12\3\0\4\12\1\u0199\37\12\7\0\5\12\1\0"+
    "\7\12\3\0\11\12\1\u019a\32\12\7\0\5\12\1\0"+
    "\7\12\3\0\5\12\1\u019b\36\12\7\0\2\u0194\3\0"+
    "\1\u019c\6\u0194\57\0\5\12\1\0\7\12\3\0\41\12"+
    "\1\u019d\2\12\7\0\4\12\1\u019e\1\0\7\12\3\0"+
    "\44\12\7\0\1\u019f\1\u01a0\4\0\6\u01a0\57\0\5\12"+
    "\1\0\7\12\3\0\27\12\1\u01a1\14\12\13\0\1\u01a2"+
    "\66\0\2\u01a0\2\0\1\u01a2\1\0\6\u01a0\57\0\1\43"+
    "\1\u01a3\4\0\6\u01a3\57\0\2\u01a3\4\0\6\u01a3\54\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[19647];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\11\1\1\1\11\6\1\1\11\21\1\1\11"+
    "\2\1\1\11\1\1\1\11\6\1\1\11\1\1\2\0"+
    "\6\1\1\0\54\1\2\11\13\1\1\11\62\1\1\0"+
    "\76\1\1\11\271\1\1\0\5\1\1\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[419];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
	static {
		System.out.println("<html>");
		System.out.println("<head>");
		System.out.println("<title>KPL Highlighted Source Code</title>");
		System.out.println("<style type=\"text/css\">");
		System.out.println("  body     {white-space:pre;");
		System.out.println("            font-family:\'Courier New\', Courier, monospace;");
        System.out.println("            font-size:10pt}");
		System.out.println("  .keyword {color:maroon; font-weight:bold;}");
        System.out.println("  .type {color:darkorange; font-weight:bold;}");
        System.out.println("  .string {color:darkgreen}");
        System.out.println("  .escape {color:limegreen}");
        System.out.println("  .char {color:purple; font-weight:bold;}");
		System.out.println("  .comment {color:blue; font-style:italic;}");
		System.out.println("  .number {color:red; font-weight:bold;}");
		System.out.println("  .invalid {color:deeppink}");
		System.out.println("</style>");
		System.out.println("</head>");
		System.out.println("<body>");
        System.out.print("1    ");
	}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public KPLColor(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public KPLColor(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 156) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int nextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 40: 
          { System.out.print("<span class=\"keyword\">catch</span>");
          }
        case 94: break;
        case 61: 
          { System.out.print("<span class=\"keyword\">fields</span>");
          }
        case 95: break;
        case 17: 
          { System.out.print("<span class=\"keyword\">try</span>");
          }
        case 96: break;
        case 90: 
          { System.out.print("<span class=\"keyword\">endBehavior</span>");
          }
        case 97: break;
        case 5: 
          { yybegin (STRING);
                          System.out.print("<span class=\"string\">\"");
          }
        case 98: break;
        case 36: 
          { System.out.print("<span class=\"keyword\">endIf</span>");
          }
        case 99: break;
        case 53: 
          { System.out.print("<span class=\"keyword\">errors</span>");
          }
        case 100: break;
        case 67: 
          { System.out.print("<span class=\"keyword\">returns</span>");
          }
        case 101: break;
        case 56: 
          { System.out.print("<span class=\"keyword\">record</span>");
          }
        case 102: break;
        case 21: 
          { System.out.print("<span class=\"keyword\">var</span>");
          }
        case 103: break;
        case 16: 
          { System.out.print("<span class=\"comment\">" + yytext() + "</span>");
                          System.out.print(yyline+2);
                          if ((yyline+2) < 10)
                              System.out.print("    ");
                          else if ((yyline+2) < 100)
                              System.out.print("   ");
                          else if ((yyline+2) < 1000)
                              System.out.print("  ");
                          else
                              System.out.print(" ");
          }
        case 104: break;
        case 14: 
          { yybegin (BLOCK_COMMENT);
                          System.out.print("<span class=\"comment\">/*");
          }
        case 105: break;
        case 12: 
          { System.out.print("<span class=\"keyword\">by</span>");
          }
        case 106: break;
        case 58: 
          { System.out.print("<span class=\"keyword\">switch</span>");
          }
        case 107: break;
        case 57: 
          { System.out.print("<span class=\"keyword\">sizeOf</span>");
          }
        case 108: break;
        case 19: 
          { System.out.print("<span class=\"keyword\">ptr</span>");
          }
        case 109: break;
        case 74: 
          { System.out.print("<span class=\"keyword\">renaming</span>");
          }
        case 110: break;
        case 84: 
          { System.out.print("<span class=\"keyword\">asInteger</span>");
          }
        case 111: break;
        case 64: 
          { System.out.print("<span class=\"keyword\">endCode</span>");
          }
        case 112: break;
        case 2: 
          { System.out.print("\n" + (yyline+2));
                          if ((yyline+2) < 10)
                              System.out.print("    ");
                          else if ((yyline+2) < 100)
                              System.out.print("   ");
                          else if ((yyline+2) < 1000)
                              System.out.print("  ");
                          else
                              System.out.print(" ");
          }
        case 113: break;
        case 93: 
          { System.out.print("<span class=\"keyword\">isInstanceOf</span>");
          }
        case 114: break;
        case 83: 
          { System.out.print("<span class=\"keyword\">arraySize</span>");
          }
        case 115: break;
        case 80: 
          { System.out.print("<span class=\"keyword\">endHeader</span>");
          }
        case 116: break;
        case 70: 
          { System.out.print("<span class=\"keyword\">external</span>");
          }
        case 117: break;
        case 92: 
          { System.out.print("<span class=\"keyword\">endInterface</span>");
          }
        case 118: break;
        case 46: 
          { System.out.print("<span class=\"keyword\">debug</span>");
          }
        case 119: break;
        case 89: 
          { System.out.print("<span class=\"keyword\">superclass</span>");
          }
        case 120: break;
        case 62: 
          { System.out.print("<span class=\"keyword\">method</span>");
          }
        case 121: break;
        case 33: 
          { System.out.print("<span class=\"type\">void</span>");
          }
        case 122: break;
        case 11: 
          { System.out.print("<span class=\"keyword\">if</span>");
          }
        case 123: break;
        case 41: 
          { System.out.print("<span class=\"keyword\">class</span>");
          }
        case 124: break;
        case 27: 
          { System.out.print("<span class=\"keyword\">case</span>");
          }
        case 125: break;
        case 86: 
          { System.out.print("<span class=\"keyword\">functions</span>");
          }
        case 126: break;
        case 7: 
          { yybegin (YYINITIAL);
                          System.out.print(yytext() + "</span>");
          }
        case 127: break;
        case 24: 
          { System.out.print("<span class=\"type\">enum</span>");
          }
        case 128: break;
        case 60: 
          { System.out.print("<span class=\"type\">double</span>");
          }
        case 129: break;
        case 82: 
          { System.out.print("<span class=\"keyword\">endRecord</span>");
          }
        case 130: break;
        case 37: 
          { System.out.print("<span class=\"keyword\">throw</span>");
          }
        case 131: break;
        case 75: 
          { System.out.print("<span class=\"keyword\">isKindOf</span>");
          }
        case 132: break;
        case 44: 
          { System.out.print("<span class=\"keyword\">super</span>");
          }
        case 133: break;
        case 49: 
          { System.out.print("<span class=\"keyword\">while</span>");
          }
        case 134: break;
        case 79: 
          { System.out.print("<span class=\"keyword\">endSwitch</span>");
          }
        case 135: break;
        case 29: 
          { System.out.print("<span class=\"type\">char</span>");
          }
        case 136: break;
        case 88: 
          { System.out.print("<span class=\"keyword\">implements</span>");
          }
        case 137: break;
        case 4: 
          { yybegin (CHAR);
                          System.out.print("<span class=\"char\">\'");
          }
        case 138: break;
        case 66: 
          { System.out.print("<span class=\"keyword\">asPtrTo</span>");
          }
        case 139: break;
        case 32: 
          { System.out.print("<span class=\"type\">bool</span>");
          }
        case 140: break;
        case 55: 
          { System.out.print("<span class=\"keyword\">return</span>");
          }
        case 141: break;
        case 65: 
          { System.out.print("<span class=\"keyword\">anyType</span>");
          }
        case 142: break;
        case 52: 
          { System.out.print("<span class=\"keyword\">endFor</span>");
          }
        case 143: break;
        case 35: 
          { System.out.print("<span class=\"keyword\">free</span>");
          }
        case 144: break;
        case 9: 
          { System.out.print("<span class=\"keyword\">to</span>");
          }
        case 145: break;
        case 39: 
          { System.out.print("<span class=\"type\">array</span>");
          }
        case 146: break;
        case 23: 
          { System.out.print("<span class=\"keyword\">else</span>");
          }
        case 147: break;
        case 78: 
          { System.out.print("<span class=\"keyword\">messages</span>");
          }
        case 148: break;
        case 77: 
          { System.out.print("<span class=\"keyword\">function</span>");
          }
        case 149: break;
        case 28: 
          { System.out.print("<span class=\"keyword\">code</span>");
          }
        case 150: break;
        case 81: 
          { System.out.print("<span class=\"keyword\">endMethod</span>");
          }
        case 151: break;
        case 1: 
          { System.out.print(yytext());
          }
        case 152: break;
        case 69: 
          { System.out.print("<span class=\"keyword\">methods</span>");
          }
        case 153: break;
        case 25: 
          { System.out.print("<span class=\"keyword\">type</span>");
          }
        case 154: break;
        case 38: 
          { System.out.print("<span class=\"keyword\">alloc</span>");
          }
        case 155: break;
        case 54: 
          { System.out.print("<span class=\"keyword\">prefix</span>");
          }
        case 156: break;
        case 76: 
          { System.out.print("<span class=\"keyword\">behavior</span>");
          }
        case 157: break;
        case 8: 
          { System.out.print("</span>\n" + (yyline+2));
                          if ((yyline+2) < 10)
                              System.out.print("    ");
                          else if ((yyline+2) < 100)
                              System.out.print("   ");
                          else if ((yyline+2) < 1000)
                              System.out.print("  ");
                          else
                              System.out.print(" ");
                          System.out.print("<span class=\"comment\">");
          }
        case 158: break;
        case 73: 
          { System.out.print("<span class=\"keyword\">continue</span>");
          }
        case 159: break;
        case 3: 
          { System.out.print("<span class=\"number\">" + yytext() + "</span>");
          }
        case 160: break;
        case 13: 
          { System.out.print("<span class=\"keyword\">do</span>");
          }
        case 161: break;
        case 51: 
          { System.out.print("<span class=\"keyword\">endTry</span>");
          }
        case 162: break;
        case 20: 
          { System.out.print("<span class=\"type\">int</span>");
          }
        case 163: break;
        case 43: 
          { System.out.print("<span class=\"keyword\">infix</span>");
          }
        case 164: break;
        case 63: 
          { System.out.print("<span class=\"keyword\">extends</span>");
          }
        case 165: break;
        case 18: 
          { System.out.print("<span class=\"keyword\">new</span>");
          }
        case 166: break;
        case 42: 
          { System.out.print("<span class=\"type\">const</span>");
          }
        case 167: break;
        case 34: 
          { System.out.print("<span class=\"keyword\">uses</span>");
          }
        case 168: break;
        case 85: 
          { System.out.print("<span class=\"keyword\">interface</span>");
          }
        case 169: break;
        case 50: 
          { System.out.print("<span class=\"keyword\">elseIf</span>");
          }
        case 170: break;
        case 10: 
          { System.out.print("<span class=\"keyword\">of</span>");
          }
        case 171: break;
        case 87: 
          { System.out.print("<span class=\"keyword\">typeOfNull</span>");
          }
        case 172: break;
        case 30: 
          { System.out.print("<span class=\"keyword\">null</span>");
          }
        case 173: break;
        case 6: 
          { System.out.print("<span class=\"invalid\">" + yytext() + "</span>");
          }
        case 174: break;
        case 26: 
          { System.out.print("<span class=\"keyword\">true</span>");
          }
        case 175: break;
        case 48: 
          { System.out.print("<span class=\"keyword\">false</span>");
          }
        case 176: break;
        case 22: 
          { System.out.print("<span class=\"keyword\">for</span>");
          }
        case 177: break;
        case 47: 
          { System.out.print("<span class=\"keyword\">until</span>");
          }
        case 178: break;
        case 15: 
          { System.out.print("<span class=\"escape\">" + yytext() + "</span>");
          }
        case 179: break;
        case 71: 
          { System.out.print("<span class=\"keyword\">endClass</span>");
          }
        case 180: break;
        case 68: 
          { System.out.print("<span class=\"keyword\">default</span>");
          }
        case 181: break;
        case 72: 
          { System.out.print("<span class=\"keyword\">endWhile</span>");
          }
        case 182: break;
        case 31: 
          { System.out.print("<span class=\"keyword\">self</span>");
          }
        case 183: break;
        case 45: 
          { System.out.print("<span class=\"keyword\">break</span>");
          }
        case 184: break;
        case 91: 
          { System.out.print("<span class=\"keyword\">endFunction</span>");
          }
        case 185: break;
        case 59: 
          { System.out.print("<span class=\"keyword\">header</span>");
          }
        case 186: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              { 		System.out.println("</body>");
		System.out.println("</html>");

		return 0;
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java KPLColor <inputfile>");
    }
    else {
      for (int i = 0; i < argv.length; i++) {
        KPLColor scanner = null;
        try {
          scanner = new KPLColor( new java.io.FileReader(argv[i]) );
          while ( !scanner.zzAtEOF ) scanner.nextToken();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
