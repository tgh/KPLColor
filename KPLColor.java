/* The following code was generated by JFlex 1.4.2 on 11/30/09 8:57 PM */

/*
 * Copyright Â© 2009 Tyler Hayes <tgh@pdx.edu>
 * ALL RIGHTS RESERVED
 * [This program is licensed under the GPL version 3 or later.]
 * Please see the file COPYING in the source
 * distribution of this software for license terms.
 */

/**
 * @author Tyler Hayes
 * 
 * Color highlighting for Kernel Programming Language (KPL) source code.  Output
 * in HTML.
 */


public class KPLColor extends Object {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 2;
  public static final int BLOCK_COMMENT = 6;
  public static final int YYINITIAL = 0;
  public static final int CHAR = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\12\0\1\2\2\0\1\1\24\0\1\67\3\0\1\75\1\22\2\0"+
    "\1\71\1\76\1\0\1\20\1\10\1\70\1\3\1\4\1\11\1\15"+
    "\2\16\1\12\1\13\2\14\2\0\1\74\1\73\1\72\2\0\1\6"+
    "\1\53\1\54\2\6\1\55\1\17\1\56\1\41\1\17\1\65\1\17"+
    "\1\57\1\66\1\64\1\43\1\17\1\60\1\35\1\32\2\17\1\62"+
    "\3\17\1\0\1\21\2\0\1\17\1\0\1\24\1\44\1\27\1\50"+
    "\1\7\1\52\1\42\1\45\1\36\1\17\1\47\1\25\1\63\1\30"+
    "\1\26\1\33\1\17\1\34\1\40\1\23\1\51\1\46\1\61\1\5"+
    "\1\31\1\37\uff85\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\2\2\2\3\2\1\1\3\1\1\1\4"+
    "\21\1\1\5\1\1\1\6\1\7\1\10\2\11\1\1"+
    "\1\12\1\1\3\11\1\12\2\13\1\1\2\0\1\3"+
    "\4\1\1\3\1\0\1\14\7\1\1\15\13\1\1\16"+
    "\7\1\1\17\5\1\1\20\11\1\1\21\1\22\1\23"+
    "\1\24\1\25\4\3\5\1\1\3\2\26\1\1\1\27"+
    "\15\1\1\30\1\1\1\31\4\1\1\32\14\1\1\33"+
    "\7\1\1\34\6\1\1\0\1\3\1\1\1\35\12\1"+
    "\1\36\1\1\1\3\1\37\1\40\7\1\1\41\3\1"+
    "\1\42\1\43\1\44\11\1\1\45\4\1\1\46\2\1"+
    "\1\47\4\1\1\50\1\1\1\51\5\1\3\3\6\1"+
    "\1\52\12\1\1\3\1\1\1\53\1\54\1\1\1\55"+
    "\2\1\1\56\1\57\1\1\1\60\5\1\1\61\4\1"+
    "\1\62\2\1\1\63\1\1\1\64\2\1\1\65\1\66"+
    "\2\1\1\67\2\1\1\3\2\1\1\70\1\71\5\1"+
    "\1\72\5\1\1\73\1\3\6\1\1\74\1\75\1\76"+
    "\5\1\1\77\1\1\1\100\1\1\1\101\1\1\1\102"+
    "\1\103\1\1\1\104\1\1\1\3\1\105\5\1\1\106"+
    "\5\1\1\3\1\1\1\107\2\1\1\110\1\1\1\111"+
    "\7\1\1\112\1\1\1\113\1\1\1\3\1\114\3\1"+
    "\1\115\4\1\1\116\1\3\3\1\1\117\1\120\2\1"+
    "\1\121\2\1\1\122\1\123\1\124\1\3\1\125\3\1"+
    "\1\126\1\127\1\130\1\3\1\1\1\131\1\132\1\133"+
    "\3\1\1\134\1\3\3\1\1\11\1\135\1\1\1\136"+
    "\1\137\1\1\1\140\1\141\1\0\1\1\1\142\2\11"+
    "\1\143\1\0\1\11";

  private static int [] zzUnpackAction() {
    int [] result = new int[425];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\77\0\176\0\275\0\374\0\u013b\0\374\0\u017a"+
    "\0\u01b9\0\u01f8\0\u0237\0\u0276\0\u02b5\0\374\0\u02f4\0\u0333"+
    "\0\u0372\0\u03b1\0\u03f0\0\u042f\0\u046e\0\u04ad\0\u04ec\0\u052b"+
    "\0\u056a\0\u05a9\0\u05e8\0\u0627\0\u0666\0\u06a5\0\u06e4\0\374"+
    "\0\u0723\0\u0762\0\u07a1\0\u07e0\0\u081f\0\374\0\u085e\0\374"+
    "\0\u089d\0\u08dc\0\u089d\0\u091b\0\u089d\0\u095a\0\374\0\u0999"+
    "\0\u09d8\0\u0a17\0\u0a56\0\u0a95\0\u0ad4\0\u0b13\0\u0b52\0\u0b91"+
    "\0\u0bd0\0\u01f8\0\u0c0f\0\u0c4e\0\u0c8d\0\u0ccc\0\u0d0b\0\u0d4a"+
    "\0\u0d89\0\u01f8\0\u0dc8\0\u0e07\0\u0e46\0\u0e85\0\u0ec4\0\u0f03"+
    "\0\u0f42\0\u0f81\0\u0fc0\0\u0fff\0\u103e\0\u01f8\0\u107d\0\u10bc"+
    "\0\u10fb\0\u113a\0\u1179\0\u11b8\0\u11f7\0\u01f8\0\u1236\0\u1275"+
    "\0\u12b4\0\u12f3\0\u1332\0\u1371\0\u13b0\0\u13ef\0\u142e\0\u146d"+
    "\0\u14ac\0\u14eb\0\u152a\0\u1569\0\u15a8\0\374\0\374\0\374"+
    "\0\374\0\374\0\u09d8\0\u15e7\0\u1626\0\u1665\0\u16a4\0\u16e3"+
    "\0\u1722\0\u1761\0\u17a0\0\u17df\0\u181e\0\374\0\u185d\0\u01f8"+
    "\0\u189c\0\u18db\0\u191a\0\u1959\0\u1998\0\u19d7\0\u1a16\0\u1a55"+
    "\0\u1a94\0\u1ad3\0\u1b12\0\u1b51\0\u1b90\0\u01f8\0\u1bcf\0\u01f8"+
    "\0\u1c0e\0\u1c4d\0\u1c8c\0\u1ccb\0\u1d0a\0\u1d49\0\u1d88\0\u1dc7"+
    "\0\u1e06\0\u1e45\0\u1e84\0\u1ec3\0\u1f02\0\u1f41\0\u1f80\0\u1fbf"+
    "\0\u1ffe\0\u01f8\0\u203d\0\u207c\0\u20bb\0\u20fa\0\u2139\0\u2178"+
    "\0\u21b7\0\u01f8\0\u21f6\0\u2235\0\u2274\0\u22b3\0\u22f2\0\u2331"+
    "\0\u2370\0\u23af\0\u23ee\0\u242d\0\u246c\0\u24ab\0\u24ea\0\u2529"+
    "\0\u2568\0\u25a7\0\u25e6\0\u2625\0\u2664\0\u26a3\0\u01f8\0\u26e2"+
    "\0\u2721\0\u2760\0\u01f8\0\u279f\0\u27de\0\u281d\0\u285c\0\u289b"+
    "\0\u28da\0\u2919\0\u01f8\0\u2958\0\u2997\0\u29d6\0\u01f8\0\u01f8"+
    "\0\u01f8\0\u2a15\0\u2a54\0\u2a93\0\u2ad2\0\u2b11\0\u2b50\0\u2b8f"+
    "\0\u2bce\0\u2c0d\0\u01f8\0\u2c4c\0\u2c8b\0\u2cca\0\u2d09\0\u01f8"+
    "\0\u2d48\0\u2d87\0\u01f8\0\u2dc6\0\u2e05\0\u2e44\0\u2e83\0\u01f8"+
    "\0\u2ec2\0\u01f8\0\u2f01\0\u2f40\0\u2f7f\0\u2fbe\0\u2ffd\0\374"+
    "\0\u303c\0\u307b\0\u30ba\0\u30f9\0\u3138\0\u3177\0\u31b6\0\u31f5"+
    "\0\u01f8\0\u3234\0\u3273\0\u32b2\0\u32f1\0\u3330\0\u336f\0\u33ae"+
    "\0\u33ed\0\u342c\0\u346b\0\u34aa\0\u34e9\0\u01f8\0\u01f8\0\u3528"+
    "\0\u3567\0\u35a6\0\u35e5\0\u01f8\0\u01f8\0\u3624\0\u01f8\0\u3663"+
    "\0\u36a2\0\u36e1\0\u3720\0\u375f\0\u01f8\0\u379e\0\u37dd\0\u381c"+
    "\0\u385b\0\u389a\0\u38d9\0\u3918\0\u01f8\0\u3957\0\u01f8\0\u3996"+
    "\0\u39d5\0\u01f8\0\u01f8\0\u3a14\0\u3a53\0\u01f8\0\u3a92\0\u3ad1"+
    "\0\u3b10\0\u3b4f\0\u3b8e\0\u01f8\0\u01f8\0\u3bcd\0\u3c0c\0\u3c4b"+
    "\0\u3c8a\0\u3cc9\0\u01f8\0\u3d08\0\u3d47\0\u3d86\0\u3dc5\0\u3e04"+
    "\0\u01f8\0\u3e43\0\u3e82\0\u3ec1\0\u3f00\0\u3f3f\0\u3f7e\0\u3fbd"+
    "\0\u01f8\0\u3ffc\0\u01f8\0\u403b\0\u407a\0\u40b9\0\u40f8\0\u4137"+
    "\0\u01f8\0\u4176\0\u01f8\0\u41b5\0\u01f8\0\u41f4\0\u01f8\0\u01f8"+
    "\0\u4233\0\u4272\0\u42b1\0\u42f0\0\u01f8\0\u432f\0\u436e\0\u43ad"+
    "\0\u43ec\0\u442b\0\u01f8\0\u446a\0\u44a9\0\u44e8\0\u4527\0\u4566"+
    "\0\u45a5\0\u45e4\0\u01f8\0\u4623\0\u4662\0\u01f8\0\u46a1\0\u01f8"+
    "\0\u46e0\0\u471f\0\u475e\0\u479d\0\u47dc\0\u481b\0\u485a\0\u01f8"+
    "\0\u4899\0\u01f8\0\u48d8\0\u4917\0\u01f8\0\u4956\0\u4995\0\u49d4"+
    "\0\u01f8\0\u4a13\0\u4a52\0\u4a91\0\u4ad0\0\u01f8\0\u4b0f\0\u4b4e"+
    "\0\u4b8d\0\u4bcc\0\u01f8\0\u01f8\0\u4c0b\0\u4c4a\0\u01f8\0\u4c89"+
    "\0\u4cc8\0\u01f8\0\u4d07\0\u01f8\0\u4d46\0\u01f8\0\u4d85\0\u4dc4"+
    "\0\u4e03\0\u01f8\0\u01f8\0\u01f8\0\u4e42\0\u4e81\0\u01f8\0\u01f8"+
    "\0\u01f8\0\u4ec0\0\u4eff\0\u4f3e\0\u01f8\0\u4f7d\0\u4fbc\0\u4ffb"+
    "\0\u503a\0\u5079\0\u01f8\0\u50b8\0\u01f8\0\u01f8\0\u50f7\0\u01f8"+
    "\0\u01f8\0\u5136\0\u5175\0\u01f8\0\u51b4\0\u51f3\0\u01f8\0\u5232"+
    "\0\u5271";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[425];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\1\7\1\10\1\11\2\12\1\13\1\5"+
    "\6\14\1\12\1\15\1\5\1\16\1\17\1\20\1\12"+
    "\1\21\1\22\1\23\2\12\1\24\1\25\1\12\1\26"+
    "\1\12\1\27\3\12\1\30\1\31\1\32\1\12\1\33"+
    "\1\34\1\35\6\12\1\36\1\12\1\37\3\12\1\40"+
    "\1\41\1\5\1\42\1\5\1\43\1\44\2\5\1\45"+
    "\1\46\16\5\1\47\45\5\1\50\7\5\1\51\1\52"+
    "\1\53\5\51\1\53\10\51\1\54\1\55\53\51\1\53"+
    "\1\5\1\56\1\57\66\5\1\60\5\5\101\0\1\7"+
    "\101\0\1\61\2\0\1\62\71\0\2\63\3\0\1\62"+
    "\6\63\63\0\5\12\1\0\7\12\3\0\44\12\13\0"+
    "\2\12\1\64\2\12\1\0\7\12\3\0\2\12\1\65"+
    "\2\12\1\66\3\12\1\67\32\12\13\0\1\63\1\70"+
    "\3\0\1\62\6\70\100\0\1\71\61\0\5\12\1\0"+
    "\7\12\3\0\3\12\1\72\2\12\1\73\2\12\1\74"+
    "\10\12\1\75\21\12\13\0\5\12\1\0\7\12\3\0"+
    "\2\12\1\76\2\12\1\77\3\12\1\100\3\12\1\101"+
    "\26\12\13\0\5\12\1\0\7\12\3\0\27\12\1\102"+
    "\14\12\13\0\5\12\1\0\7\12\3\0\1\12\1\103"+
    "\1\104\1\105\16\12\1\106\21\12\13\0\4\12\1\107"+
    "\1\0\7\12\3\0\26\12\1\110\15\12\13\0\5\12"+
    "\1\0\7\12\3\0\1\111\10\12\1\112\32\12\13\0"+
    "\4\12\1\113\1\0\7\12\3\0\44\12\13\0\5\12"+
    "\1\0\7\12\3\0\5\12\1\114\7\12\1\115\11\12"+
    "\1\116\10\12\1\117\3\12\13\0\4\12\1\120\1\0"+
    "\7\12\3\0\13\12\1\121\12\12\1\122\7\12\1\123"+
    "\5\12\13\0\4\12\1\124\1\0\7\12\3\0\3\12"+
    "\1\125\2\12\1\126\2\12\1\127\32\12\13\0\4\12"+
    "\1\130\1\0\7\12\3\0\44\12\13\0\5\12\1\0"+
    "\7\12\3\0\1\12\1\131\1\12\1\132\40\12\13\0"+
    "\4\12\1\133\1\0\7\12\3\0\3\12\1\134\40\12"+
    "\13\0\5\12\1\0\7\12\3\0\5\12\1\135\7\12"+
    "\1\136\26\12\13\0\5\12\1\0\7\12\3\0\1\12"+
    "\1\137\1\12\1\140\5\12\1\141\1\12\1\142\12\12"+
    "\1\143\15\12\13\0\5\12\1\0\7\12\3\0\22\12"+
    "\1\144\21\12\13\0\4\12\1\145\1\0\7\12\3\0"+
    "\44\12\101\0\1\146\100\0\1\147\76\0\1\150\100\0"+
    "\1\151\3\0\1\46\74\0\3\46\1\152\15\46\3\152"+
    "\4\46\1\152\36\46\1\152\7\46\10\0\1\46\65\0"+
    "\1\46\2\0\1\46\5\0\1\46\65\0\4\46\1\0"+
    "\15\46\3\0\4\46\1\0\36\46\1\0\7\46\2\0"+
    "\1\57\164\0\1\50\11\0\2\153\1\0\2\153\1\0"+
    "\6\153\5\0\1\153\2\0\1\153\14\0\1\153\3\0"+
    "\1\153\1\0\4\153\24\0\1\154\1\155\4\0\6\155"+
    "\63\0\2\156\3\0\1\62\6\156\63\0\5\12\1\0"+
    "\7\12\3\0\1\157\43\12\13\0\5\12\1\0\7\12"+
    "\3\0\15\12\1\160\26\12\13\0\5\12\1\0\7\12"+
    "\3\0\25\12\1\161\1\162\15\12\13\0\5\12\1\0"+
    "\7\12\3\0\11\12\1\163\32\12\13\0\2\156\3\0"+
    "\1\62\1\156\3\164\1\156\1\164\60\0\1\71\1\165"+
    "\1\166\74\71\3\0\5\12\1\0\7\12\3\0\10\12"+
    "\1\167\33\12\13\0\5\12\1\0\7\12\3\0\6\12"+
    "\1\170\17\12\1\171\15\12\13\0\5\12\1\0\7\12"+
    "\3\0\11\12\1\172\32\12\13\0\5\12\1\0\7\12"+
    "\3\0\2\12\1\173\41\12\13\0\5\12\1\0\7\12"+
    "\3\0\6\12\1\174\35\12\13\0\5\12\1\0\7\12"+
    "\3\0\11\12\1\175\32\12\13\0\5\12\1\0\7\12"+
    "\3\0\16\12\1\176\1\12\1\177\23\12\13\0\5\12"+
    "\1\0\7\12\3\0\1\200\14\12\1\201\26\12\13\0"+
    "\5\12\1\0\7\12\3\0\1\12\1\202\42\12\13\0"+
    "\5\12\1\0\7\12\3\0\5\12\1\203\17\12\1\204"+
    "\16\12\13\0\5\12\1\0\7\12\3\0\1\12\1\205"+
    "\42\12\13\0\5\12\1\0\7\12\3\0\36\12\1\206"+
    "\5\12\13\0\5\12\1\0\7\12\3\0\2\12\1\207"+
    "\41\12\13\0\5\12\1\0\7\12\3\0\11\12\1\210"+
    "\32\12\13\0\4\12\1\211\1\0\7\12\3\0\44\12"+
    "\13\0\5\12\1\0\7\12\3\0\1\212\3\12\1\213"+
    "\1\214\36\12\13\0\5\12\1\0\7\12\3\0\1\215"+
    "\26\12\1\216\14\12\13\0\5\12\1\0\7\12\3\0"+
    "\16\12\1\217\23\12\1\220\1\12\13\0\5\12\1\0"+
    "\7\12\3\0\10\12\1\221\33\12\13\0\5\12\1\0"+
    "\7\12\3\0\2\12\1\222\41\12\13\0\5\12\1\0"+
    "\7\12\3\0\14\12\1\223\27\12\13\0\5\12\1\0"+
    "\7\12\3\0\10\12\1\224\33\12\13\0\5\12\1\0"+
    "\7\12\3\0\13\12\1\225\30\12\13\0\5\12\1\0"+
    "\7\12\3\0\22\12\1\226\21\12\13\0\5\12\1\0"+
    "\7\12\3\0\3\12\1\227\40\12\13\0\4\12\1\230"+
    "\1\0\7\12\3\0\44\12\13\0\5\12\1\0\7\12"+
    "\3\0\1\12\1\231\42\12\13\0\5\12\1\0\7\12"+
    "\3\0\11\12\1\232\32\12\13\0\5\12\1\0\7\12"+
    "\3\0\13\12\1\233\30\12\13\0\5\12\1\0\7\12"+
    "\3\0\21\12\1\234\5\12\1\235\14\12\13\0\5\12"+
    "\1\0\7\12\3\0\26\12\1\236\15\12\13\0\5\12"+
    "\1\0\7\12\3\0\1\237\43\12\13\0\4\12\1\240"+
    "\1\0\7\12\3\0\44\12\13\0\5\12\1\0\7\12"+
    "\3\0\2\12\1\241\41\12\13\0\5\12\1\0\7\12"+
    "\3\0\11\12\1\242\32\12\13\0\4\12\1\243\1\0"+
    "\7\12\3\0\44\12\13\0\4\12\1\244\1\0\7\12"+
    "\3\0\44\12\13\0\5\12\1\0\7\12\3\0\5\12"+
    "\1\245\36\12\13\0\5\12\1\0\7\12\3\0\13\12"+
    "\1\246\30\12\13\0\5\12\1\0\7\12\3\0\1\247"+
    "\14\12\1\250\26\12\17\0\1\251\72\0\2\155\2\0"+
    "\1\251\1\0\6\155\63\0\2\252\3\0\1\62\6\252"+
    "\63\0\4\12\1\253\1\0\7\12\3\0\44\12\13\0"+
    "\4\12\1\254\1\0\7\12\3\0\44\12\13\0\5\12"+
    "\1\0\7\12\3\0\7\12\1\255\2\12\1\256\3\12"+
    "\1\257\11\12\1\260\1\261\1\262\1\263\1\264\1\265"+
    "\1\12\1\266\4\12\13\0\5\12\1\0\7\12\3\0"+
    "\40\12\1\267\3\12\13\0\5\12\1\0\7\12\3\0"+
    "\3\12\1\270\40\12\13\0\2\252\3\0\1\62\2\252"+
    "\2\271\2\252\62\0\1\166\77\0\4\12\1\272\1\0"+
    "\7\12\3\0\44\12\13\0\4\12\1\273\1\0\7\12"+
    "\3\0\44\12\13\0\5\12\1\0\7\12\3\0\3\12"+
    "\1\274\40\12\13\0\5\12\1\0\7\12\3\0\3\12"+
    "\1\275\40\12\13\0\5\12\1\0\7\12\3\0\7\12"+
    "\1\276\34\12\13\0\5\12\1\0\7\12\3\0\1\12"+
    "\1\277\42\12\13\0\5\12\1\0\7\12\3\0\5\12"+
    "\1\300\36\12\13\0\5\12\1\0\7\12\3\0\1\301"+
    "\43\12\13\0\5\12\1\0\7\12\3\0\4\12\1\302"+
    "\37\12\13\0\4\12\1\303\1\0\7\12\3\0\44\12"+
    "\13\0\5\12\1\0\7\12\3\0\15\12\1\304\26\12"+
    "\13\0\5\12\1\0\7\12\3\0\1\305\14\12\1\306"+
    "\26\12\13\0\4\12\1\307\1\0\7\12\3\0\44\12"+
    "\13\0\5\12\1\0\7\12\3\0\11\12\1\310\32\12"+
    "\13\0\5\12\1\0\7\12\3\0\2\12\1\311\41\12"+
    "\13\0\5\12\1\0\7\12\3\0\27\12\1\312\14\12"+
    "\13\0\5\12\1\0\7\12\3\0\26\12\1\313\15\12"+
    "\13\0\5\12\1\0\7\12\3\0\3\12\1\314\40\12"+
    "\13\0\5\12\1\0\7\12\3\0\1\12\1\315\42\12"+
    "\13\0\4\12\1\316\1\0\7\12\3\0\44\12\13\0"+
    "\5\12\1\0\7\12\3\0\13\12\1\317\30\12\13\0"+
    "\5\12\1\0\7\12\3\0\5\12\1\320\36\12\13\0"+
    "\5\12\1\0\7\12\3\0\13\12\1\321\30\12\13\0"+
    "\5\12\1\0\7\12\3\0\2\12\1\322\41\12\13\0"+
    "\5\12\1\0\7\12\3\0\27\12\1\323\14\12\13\0"+
    "\4\12\1\324\1\0\7\12\3\0\44\12\13\0\4\12"+
    "\1\325\1\0\7\12\3\0\44\12\13\0\5\12\1\0"+
    "\7\12\3\0\1\326\43\12\13\0\5\12\1\0\7\12"+
    "\3\0\1\12\1\327\42\12\13\0\5\12\1\0\7\12"+
    "\3\0\2\12\1\330\41\12\13\0\5\12\1\0\7\12"+
    "\3\0\1\12\1\331\42\12\13\0\5\12\1\0\7\12"+
    "\3\0\25\12\1\332\16\12\13\0\5\12\1\0\7\12"+
    "\3\0\25\12\1\333\16\12\13\0\5\12\1\0\7\12"+
    "\3\0\26\12\1\334\15\12\13\0\5\12\1\0\7\12"+
    "\3\0\1\12\1\335\42\12\13\0\5\12\1\0\7\12"+
    "\3\0\21\12\1\336\22\12\13\0\5\12\1\0\7\12"+
    "\3\0\13\12\1\337\30\12\13\0\5\12\1\0\7\12"+
    "\3\0\15\12\1\340\26\12\13\0\5\12\1\0\7\12"+
    "\3\0\15\12\1\341\26\12\13\0\4\12\1\342\1\0"+
    "\7\12\3\0\44\12\13\0\5\12\1\0\7\12\3\0"+
    "\2\12\1\343\41\12\13\0\5\12\1\0\7\12\3\0"+
    "\4\12\1\344\37\12\13\0\5\12\1\0\7\12\3\0"+
    "\2\12\1\345\41\12\13\0\5\12\1\0\7\12\3\0"+
    "\22\12\1\346\21\12\13\0\5\12\1\0\7\12\3\0"+
    "\15\12\1\347\26\12\13\0\1\350\1\351\4\0\6\351"+
    "\63\0\2\352\3\0\1\62\6\352\63\0\5\12\1\0"+
    "\7\12\3\0\5\12\1\353\3\12\1\354\32\12\13\0"+
    "\5\12\1\0\7\12\3\0\16\12\1\355\25\12\13\0"+
    "\5\12\1\0\7\12\3\0\11\12\1\356\32\12\13\0"+
    "\5\12\1\0\7\12\3\0\36\12\1\357\5\12\13\0"+
    "\5\12\1\0\7\12\3\0\5\12\1\360\21\12\1\361"+
    "\14\12\13\0\4\12\1\362\1\0\7\12\3\0\44\12"+
    "\13\0\5\12\1\0\7\12\3\0\2\12\1\363\1\364"+
    "\40\12\13\0\5\12\1\0\7\12\3\0\3\12\1\365"+
    "\22\12\1\366\15\12\13\0\4\12\1\367\1\0\7\12"+
    "\3\0\44\12\13\0\4\12\1\370\1\0\7\12\3\0"+
    "\44\12\13\0\4\12\1\371\1\0\7\12\3\0\44\12"+
    "\13\0\5\12\1\0\7\12\3\0\22\12\1\372\21\12"+
    "\13\0\5\12\1\0\7\12\3\0\11\12\1\373\32\12"+
    "\13\0\2\352\3\0\1\62\1\352\3\374\1\352\1\374"+
    "\63\0\5\12\1\0\7\12\3\0\41\12\1\375\2\12"+
    "\13\0\5\12\1\0\7\12\3\0\36\12\1\376\5\12"+
    "\13\0\5\12\1\0\7\12\3\0\4\12\1\377\37\12"+
    "\13\0\5\12\1\0\7\12\3\0\6\12\1\u0100\35\12"+
    "\13\0\5\12\1\0\7\12\3\0\6\12\1\u0101\35\12"+
    "\13\0\5\12\1\0\7\12\3\0\1\u0102\43\12\13\0"+
    "\5\12\1\0\7\12\3\0\11\12\1\u0103\32\12\13\0"+
    "\5\12\1\0\7\12\3\0\22\12\1\u0104\21\12\13\0"+
    "\5\12\1\0\7\12\3\0\15\12\1\u0105\26\12\13\0"+
    "\5\12\1\0\7\12\3\0\13\12\1\u0106\30\12\13\0"+
    "\5\12\1\0\7\12\3\0\1\u0107\43\12\13\0\5\12"+
    "\1\0\7\12\3\0\13\12\1\u0108\30\12\13\0\5\12"+
    "\1\0\7\12\3\0\11\12\1\u0109\32\12\13\0\5\12"+
    "\1\0\7\12\3\0\11\12\1\u010a\32\12\13\0\5\12"+
    "\1\0\7\12\3\0\40\12\1\u010b\3\12\13\0\5\12"+
    "\1\0\7\12\3\0\11\12\1\u010c\32\12\13\0\2\12"+
    "\1\u010d\2\12\1\0\7\12\3\0\44\12\13\0\5\12"+
    "\1\0\7\12\3\0\15\12\1\u010e\26\12\13\0\5\12"+
    "\1\0\7\12\3\0\5\12\1\u010f\36\12\13\0\4\12"+
    "\1\u0110\1\0\7\12\3\0\44\12\13\0\5\12\1\0"+
    "\7\12\3\0\41\12\1\u0111\2\12\13\0\5\12\1\0"+
    "\7\12\3\0\11\12\1\u0112\32\12\13\0\5\12\1\0"+
    "\7\12\3\0\4\12\1\u0113\37\12\13\0\5\12\1\0"+
    "\7\12\3\0\23\12\1\u0114\20\12\13\0\5\12\1\0"+
    "\7\12\3\0\24\12\1\u0115\17\12\13\0\4\12\1\u0116"+
    "\1\0\7\12\3\0\44\12\13\0\5\12\1\0\7\12"+
    "\3\0\17\12\1\u0117\24\12\13\0\5\12\1\0\7\12"+
    "\3\0\26\12\1\u0118\15\12\13\0\5\12\1\0\7\12"+
    "\3\0\2\12\1\u0119\41\12\13\0\5\12\1\0\7\12"+
    "\3\0\2\12\1\u011a\41\12\13\0\4\12\1\u011b\1\0"+
    "\7\12\3\0\44\12\13\0\5\12\1\0\7\12\3\0"+
    "\25\12\1\u011c\16\12\13\0\5\12\1\0\7\12\3\0"+
    "\1\u011d\43\12\13\0\4\12\1\u011e\1\0\7\12\3\0"+
    "\44\12\13\0\5\12\1\0\7\12\3\0\3\12\1\u011f"+
    "\40\12\13\0\5\12\1\0\7\12\3\0\1\12\1\u0120"+
    "\42\12\13\0\2\351\4\0\6\351\63\0\2\u0121\3\0"+
    "\1\62\6\u0121\63\0\5\12\1\0\7\12\3\0\25\12"+
    "\1\u0122\16\12\13\0\5\12\1\0\7\12\3\0\5\12"+
    "\1\u0123\36\12\13\0\5\12\1\0\7\12\3\0\27\12"+
    "\1\u0124\14\12\13\0\5\12\1\0\7\12\3\0\6\12"+
    "\1\u0125\35\12\13\0\5\12\1\0\7\12\3\0\13\12"+
    "\1\u0126\30\12\13\0\5\12\1\0\7\12\3\0\1\u0127"+
    "\43\12\13\0\5\12\1\0\7\12\3\0\22\12\1\u0128"+
    "\21\12\13\0\5\12\1\0\7\12\3\0\1\12\1\u0129"+
    "\42\12\13\0\5\12\1\0\7\12\3\0\25\12\1\u012a"+
    "\16\12\13\0\5\12\1\0\7\12\3\0\11\12\1\u012b"+
    "\32\12\13\0\5\12\1\0\7\12\3\0\5\12\1\u012c"+
    "\36\12\13\0\5\12\1\0\7\12\3\0\1\12\1\u012d"+
    "\42\12\13\0\5\12\1\0\7\12\3\0\1\u012e\43\12"+
    "\13\0\5\12\1\0\7\12\3\0\4\12\1\u012f\37\12"+
    "\13\0\5\12\1\0\7\12\3\0\13\12\1\u0130\30\12"+
    "\13\0\5\12\1\0\7\12\3\0\15\12\1\u0131\26\12"+
    "\13\0\2\u0121\3\0\1\62\3\u0121\1\u0132\2\u0121\63\0"+
    "\5\12\1\0\7\12\3\0\27\12\1\u0133\14\12\13\0"+
    "\5\12\1\0\7\12\3\0\10\12\1\u0134\33\12\13\0"+
    "\5\12\1\0\7\12\3\0\12\12\1\u0135\31\12\13\0"+
    "\4\12\1\u0136\1\0\7\12\3\0\44\12\13\0\5\12"+
    "\1\0\7\12\3\0\7\12\1\u0137\34\12\13\0\5\12"+
    "\1\0\7\12\3\0\5\12\1\u0138\36\12\13\0\2\12"+
    "\1\u0139\2\12\1\0\7\12\3\0\44\12\13\0\5\12"+
    "\1\0\7\12\3\0\5\12\1\u013a\36\12\13\0\5\12"+
    "\1\0\7\12\3\0\25\12\1\u013b\16\12\13\0\5\12"+
    "\1\0\7\12\3\0\13\12\1\u013c\30\12\13\0\5\12"+
    "\1\0\7\12\3\0\27\12\1\u013d\14\12\13\0\5\12"+
    "\1\0\7\12\3\0\1\u013e\43\12\13\0\5\12\1\0"+
    "\7\12\3\0\25\12\1\u013f\16\12\13\0\5\12\1\0"+
    "\7\12\3\0\40\12\1\u0140\3\12\13\0\5\12\1\0"+
    "\7\12\3\0\27\12\1\u0141\14\12\13\0\5\12\1\0"+
    "\7\12\3\0\4\12\1\u0142\37\12\13\0\5\12\1\0"+
    "\7\12\3\0\22\12\1\u0143\21\12\13\0\5\12\1\0"+
    "\7\12\3\0\13\12\1\u0144\30\12\13\0\5\12\1\0"+
    "\7\12\3\0\11\12\1\u0145\32\12\13\0\5\12\1\0"+
    "\7\12\3\0\2\12\1\u0146\41\12\13\0\4\12\1\u0147"+
    "\1\0\7\12\3\0\44\12\13\0\5\12\1\0\7\12"+
    "\3\0\15\12\1\u0148\26\12\13\0\5\12\1\0\7\12"+
    "\3\0\13\12\1\u0149\30\12\13\0\5\12\1\0\7\12"+
    "\3\0\25\12\1\u014a\16\12\13\0\5\12\1\0\7\12"+
    "\3\0\17\12\1\u014b\24\12\13\0\2\u014c\3\0\1\62"+
    "\6\u014c\63\0\5\12\1\0\7\12\3\0\15\12\1\u014d"+
    "\26\12\13\0\5\12\1\0\7\12\3\0\1\12\1\u014e"+
    "\42\12\13\0\5\12\1\0\7\12\3\0\1\u014f\43\12"+
    "\13\0\4\12\1\u0150\1\0\7\12\3\0\44\12\13\0"+
    "\5\12\1\0\7\12\3\0\1\12\1\u0151\42\12\13\0"+
    "\5\12\1\0\7\12\3\0\15\12\1\u0152\26\12\13\0"+
    "\4\12\1\u0153\1\0\7\12\3\0\44\12\13\0\5\12"+
    "\1\0\7\12\3\0\4\12\1\u0154\37\12\13\0\5\12"+
    "\1\0\7\12\3\0\25\12\1\u0155\16\12\13\0\5\12"+
    "\1\0\7\12\3\0\22\12\1\u0156\21\12\13\0\5\12"+
    "\1\0\7\12\3\0\3\12\1\u0157\40\12\13\0\5\12"+
    "\1\0\7\12\3\0\2\12\1\u0158\41\12\13\0\2\u014c"+
    "\3\0\1\62\4\u014c\2\u0159\63\0\5\12\1\0\7\12"+
    "\3\0\43\12\1\u015a\13\0\4\12\1\u015b\1\0\7\12"+
    "\3\0\44\12\13\0\5\12\1\0\7\12\3\0\13\12"+
    "\1\u015c\30\12\13\0\5\12\1\0\7\12\3\0\17\12"+
    "\1\u015d\24\12\13\0\5\12\1\0\7\12\3\0\3\12"+
    "\1\u015e\40\12\13\0\5\12\1\0\7\12\3\0\26\12"+
    "\1\u015f\15\12\13\0\5\12\1\0\7\12\3\0\15\12"+
    "\1\u0160\26\12\13\0\5\12\1\0\7\12\3\0\5\12"+
    "\1\u0161\36\12\13\0\5\12\1\0\7\12\3\0\1\12"+
    "\1\u0162\42\12\13\0\5\12\1\0\7\12\3\0\1\12"+
    "\1\u0163\42\12\13\0\5\12\1\0\7\12\3\0\41\12"+
    "\1\u0164\2\12\13\0\4\12\1\u0165\1\0\7\12\3\0"+
    "\44\12\13\0\5\12\1\0\7\12\3\0\2\12\1\u0166"+
    "\41\12\13\0\5\12\1\0\7\12\3\0\3\12\1\u0167"+
    "\40\12\13\0\5\12\1\0\7\12\3\0\1\u0168\43\12"+
    "\13\0\5\12\1\0\7\12\3\0\3\12\1\u0169\40\12"+
    "\13\0\5\12\1\0\7\12\3\0\15\12\1\u016a\26\12"+
    "\13\0\4\12\1\u016b\1\0\7\12\3\0\44\12\13\0"+
    "\2\u016c\3\0\1\62\6\u016c\63\0\5\12\1\0\7\12"+
    "\3\0\2\12\1\u016d\41\12\13\0\5\12\1\0\7\12"+
    "\3\0\4\12\1\u016e\37\12\13\0\5\12\1\0\7\12"+
    "\3\0\11\12\1\u016f\32\12\13\0\5\12\1\0\7\12"+
    "\3\0\23\12\1\u0170\20\12\13\0\5\12\1\0\7\12"+
    "\3\0\15\12\1\u0171\26\12\13\0\5\12\1\0\7\12"+
    "\3\0\1\u0172\43\12\13\0\4\12\1\u0173\1\0\7\12"+
    "\3\0\44\12\13\0\5\12\1\0\7\12\3\0\3\12"+
    "\1\u0174\40\12\13\0\5\12\1\0\7\12\3\0\11\12"+
    "\1\u0175\32\12\13\0\4\12\1\u0176\1\0\7\12\3\0"+
    "\44\12\13\0\2\u016c\3\0\1\62\1\u016c\3\u0177\2\u016c"+
    "\63\0\5\12\1\0\7\12\3\0\26\12\1\u0178\15\12"+
    "\13\0\5\12\1\0\7\12\3\0\14\12\1\u0179\27\12"+
    "\13\0\4\12\1\u017a\1\0\7\12\3\0\44\12\13\0"+
    "\4\12\1\u017b\1\0\7\12\3\0\44\12\13\0\5\12"+
    "\1\0\7\12\3\0\17\12\1\u017c\24\12\13\0\5\12"+
    "\1\0\7\12\3\0\4\12\1\u017d\37\12\13\0\5\12"+
    "\1\0\7\12\3\0\5\12\1\u017e\36\12\13\0\5\12"+
    "\1\0\7\12\3\0\27\12\1\u017f\14\12\13\0\5\12"+
    "\1\0\7\12\3\0\5\12\1\u0180\36\12\13\0\5\12"+
    "\1\0\7\12\3\0\1\12\1\u0181\42\12\13\0\5\12"+
    "\1\0\7\12\3\0\11\12\1\u0182\32\12\13\0\5\12"+
    "\1\0\7\12\3\0\5\12\1\u0183\36\12\13\0\5\12"+
    "\1\0\7\12\3\0\15\12\1\u0184\26\12\13\0\2\u0185"+
    "\3\0\1\62\6\u0185\63\0\5\12\1\0\7\12\3\0"+
    "\22\12\1\u0186\21\12\13\0\5\12\1\0\7\12\3\0"+
    "\27\12\1\u0187\14\12\13\0\5\12\1\0\7\12\3\0"+
    "\13\12\1\u0188\30\12\13\0\5\12\1\0\7\12\3\0"+
    "\13\12\1\u0189\30\12\13\0\5\12\1\0\7\12\3\0"+
    "\11\12\1\u018a\32\12\13\0\5\12\1\0\7\12\3\0"+
    "\25\12\1\u018b\16\12\13\0\5\12\1\0\7\12\3\0"+
    "\25\12\1\u018c\16\12\13\0\2\u0185\3\0\1\62\1\u0185"+
    "\3\u018d\1\u0185\1\u018d\63\0\5\12\1\0\7\12\3\0"+
    "\2\12\1\u018e\41\12\13\0\4\12\1\u018f\1\0\7\12"+
    "\3\0\44\12\13\0\5\12\1\0\7\12\3\0\11\12"+
    "\1\u0190\32\12\13\0\4\12\1\u0191\1\0\7\12\3\0"+
    "\44\12\13\0\5\12\1\0\7\12\3\0\4\12\1\u0192"+
    "\37\12\13\0\5\12\1\0\7\12\3\0\1\u0193\43\12"+
    "\13\0\5\12\1\0\7\12\3\0\15\12\1\u0194\26\12"+
    "\13\0\5\12\1\0\7\12\3\0\15\12\1\u0195\26\12"+
    "\13\0\2\u0196\3\0\1\62\6\u0196\63\0\5\12\1\0"+
    "\7\12\3\0\1\12\1\u0197\42\12\13\0\5\12\1\0"+
    "\7\12\3\0\3\12\1\u0198\40\12\13\0\5\12\1\0"+
    "\7\12\3\0\3\12\1\u0199\40\12\13\0\2\u0196\3\0"+
    "\1\62\3\u0196\1\u019a\2\u0196\63\0\5\12\1\0\7\12"+
    "\3\0\2\12\1\u019b\41\12\13\0\4\12\1\u019c\1\0"+
    "\7\12\3\0\44\12\13\0\5\12\1\0\7\12\3\0"+
    "\15\12\1\u019d\26\12\13\0\5\12\1\0\7\12\3\0"+
    "\15\12\1\u019e\26\12\13\0\2\u019a\3\0\1\62\6\u019a"+
    "\63\0\5\12\1\0\7\12\3\0\4\12\1\u019f\37\12"+
    "\13\0\5\12\1\0\7\12\3\0\11\12\1\u01a0\32\12"+
    "\13\0\5\12\1\0\7\12\3\0\5\12\1\u01a1\36\12"+
    "\13\0\2\u019a\3\0\1\u01a2\6\u019a\63\0\5\12\1\0"+
    "\7\12\3\0\41\12\1\u01a3\2\12\13\0\4\12\1\u01a4"+
    "\1\0\7\12\3\0\44\12\13\0\1\u01a5\1\u01a6\4\0"+
    "\6\u01a6\63\0\5\12\1\0\7\12\3\0\27\12\1\u01a7"+
    "\14\12\17\0\1\u01a8\72\0\2\u01a6\2\0\1\u01a8\1\0"+
    "\6\u01a6\63\0\1\46\1\u01a9\4\0\6\u01a9\63\0\2\u01a9"+
    "\4\0\6\u01a9\60\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[21168];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\11\1\1\1\11\6\1\1\11\21\1\1\11"+
    "\5\1\1\11\1\1\1\11\6\1\1\11\1\1\2\0"+
    "\6\1\1\0\54\1\5\11\13\1\1\11\62\1\1\0"+
    "\76\1\1\11\271\1\1\0\5\1\1\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[425];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
	static {
		System.out.println("<html>");
		System.out.println("<head>");
		System.out.println("<title>KPL Highlighted Source Code</title>");
		System.out.println("<style type=\"text/css\">");
		System.out.println("  body     {white-space:pre;");
		System.out.println("            font-family:\'Courier New\', Courier, monospace;");
        System.out.println("            font-size:10pt}");
		System.out.println("  .keyword {color:maroon; font-weight:bold;}");
        System.out.println("  .type {color:darkorange; font-weight:bold;}");
        System.out.println("  .string {color:darkgreen}");
        System.out.println("  .escape {color:limegreen}");
        System.out.println("  .char {color:purple; font-weight:bold;}");
		System.out.println("  .comment {color:blue; font-style:italic;}");
		System.out.println("  .number {color:red; font-weight:bold;}");
		System.out.println("  .invalid {color:deeppink}");
		System.out.println("</style>");
		System.out.println("</head>");
		System.out.println("<body>");
        System.out.print("1    ");
	}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public KPLColor(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public KPLColor(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 166) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int nextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 46: 
          { System.out.print("<span class=\"keyword\">catch</span>");
          }
        case 100: break;
        case 67: 
          { System.out.print("<span class=\"keyword\">fields</span>");
          }
        case 101: break;
        case 23: 
          { System.out.print("<span class=\"keyword\">try</span>");
          }
        case 102: break;
        case 8: 
          { System.out.print("&amp");
          }
        case 103: break;
        case 96: 
          { System.out.print("<span class=\"keyword\">endBehavior</span>");
          }
        case 104: break;
        case 5: 
          { yybegin (STRING);
                          System.out.print("<span class=\"string\">\"");
          }
        case 105: break;
        case 42: 
          { System.out.print("<span class=\"keyword\">endIf</span>");
          }
        case 106: break;
        case 59: 
          { System.out.print("<span class=\"keyword\">errors</span>");
          }
        case 107: break;
        case 73: 
          { System.out.print("<span class=\"keyword\">returns</span>");
          }
        case 108: break;
        case 62: 
          { System.out.print("<span class=\"keyword\">record</span>");
          }
        case 109: break;
        case 27: 
          { System.out.print("<span class=\"keyword\">var</span>");
          }
        case 110: break;
        case 22: 
          { System.out.print("<span class=\"comment\">" + yytext() + "</span>");
                          System.out.print(yyline+2);
                          if ((yyline+2) < 10)
                              System.out.print("    ");
                          else if ((yyline+2) < 100)
                              System.out.print("   ");
                          else if ((yyline+2) < 1000)
                              System.out.print("  ");
                          else
                              System.out.print(" ");
          }
        case 111: break;
        case 17: 
          { yybegin (BLOCK_COMMENT);
                          System.out.print("<span class=\"comment\">/*");
          }
        case 112: break;
        case 19: 
          { System.out.print("&lt=");
          }
        case 113: break;
        case 15: 
          { System.out.print("<span class=\"keyword\">by</span>");
          }
        case 114: break;
        case 6: 
          { System.out.print("&gt");
          }
        case 115: break;
        case 64: 
          { System.out.print("<span class=\"keyword\">switch</span>");
          }
        case 116: break;
        case 63: 
          { System.out.print("<span class=\"keyword\">sizeOf</span>");
          }
        case 117: break;
        case 25: 
          { System.out.print("<span class=\"keyword\">ptr</span>");
          }
        case 118: break;
        case 80: 
          { System.out.print("<span class=\"keyword\">renaming</span>");
          }
        case 119: break;
        case 7: 
          { System.out.print("&lt");
          }
        case 120: break;
        case 90: 
          { System.out.print("<span class=\"keyword\">asInteger</span>");
          }
        case 121: break;
        case 70: 
          { System.out.print("<span class=\"keyword\">endCode</span>");
          }
        case 122: break;
        case 20: 
          { System.out.print("&amp&amp");
          }
        case 123: break;
        case 2: 
          { System.out.print("\n" + (yyline+2));
                          if ((yyline+2) < 10)
                              System.out.print("    ");
                          else if ((yyline+2) < 100)
                              System.out.print("   ");
                          else if ((yyline+2) < 1000)
                              System.out.print("  ");
                          else
                              System.out.print(" ");
          }
        case 124: break;
        case 99: 
          { System.out.print("<span class=\"keyword\">isInstanceOf</span>");
          }
        case 125: break;
        case 89: 
          { System.out.print("<span class=\"keyword\">arraySize</span>");
          }
        case 126: break;
        case 86: 
          { System.out.print("<span class=\"keyword\">endHeader</span>");
          }
        case 127: break;
        case 76: 
          { System.out.print("<span class=\"keyword\">external</span>");
          }
        case 128: break;
        case 98: 
          { System.out.print("<span class=\"keyword\">endInterface</span>");
          }
        case 129: break;
        case 52: 
          { System.out.print("<span class=\"keyword\">debug</span>");
          }
        case 130: break;
        case 95: 
          { System.out.print("<span class=\"keyword\">superclass</span>");
          }
        case 131: break;
        case 68: 
          { System.out.print("<span class=\"keyword\">method</span>");
          }
        case 132: break;
        case 39: 
          { System.out.print("<span class=\"type\">void</span>");
          }
        case 133: break;
        case 14: 
          { System.out.print("<span class=\"keyword\">if</span>");
          }
        case 134: break;
        case 18: 
          { System.out.print("&gt=");
          }
        case 135: break;
        case 47: 
          { System.out.print("<span class=\"keyword\">class</span>");
          }
        case 136: break;
        case 33: 
          { System.out.print("<span class=\"keyword\">case</span>");
          }
        case 137: break;
        case 92: 
          { System.out.print("<span class=\"keyword\">functions</span>");
          }
        case 138: break;
        case 10: 
          { yybegin (YYINITIAL);
                          System.out.print(yytext() + "</span>");
          }
        case 139: break;
        case 30: 
          { System.out.print("<span class=\"type\">enum</span>");
          }
        case 140: break;
        case 66: 
          { System.out.print("<span class=\"type\">double</span>");
          }
        case 141: break;
        case 88: 
          { System.out.print("<span class=\"keyword\">endRecord</span>");
          }
        case 142: break;
        case 43: 
          { System.out.print("<span class=\"keyword\">throw</span>");
          }
        case 143: break;
        case 81: 
          { System.out.print("<span class=\"keyword\">isKindOf</span>");
          }
        case 144: break;
        case 50: 
          { System.out.print("<span class=\"keyword\">super</span>");
          }
        case 145: break;
        case 55: 
          { System.out.print("<span class=\"keyword\">while</span>");
          }
        case 146: break;
        case 85: 
          { System.out.print("<span class=\"keyword\">endSwitch</span>");
          }
        case 147: break;
        case 35: 
          { System.out.print("<span class=\"type\">char</span>");
          }
        case 148: break;
        case 94: 
          { System.out.print("<span class=\"keyword\">implements</span>");
          }
        case 149: break;
        case 4: 
          { yybegin (CHAR);
                          System.out.print("<span class=\"char\">\'");
          }
        case 150: break;
        case 72: 
          { System.out.print("<span class=\"keyword\">asPtrTo</span>");
          }
        case 151: break;
        case 38: 
          { System.out.print("<span class=\"type\">bool</span>");
          }
        case 152: break;
        case 61: 
          { System.out.print("<span class=\"keyword\">return</span>");
          }
        case 153: break;
        case 71: 
          { System.out.print("<span class=\"keyword\">anyType</span>");
          }
        case 154: break;
        case 58: 
          { System.out.print("<span class=\"keyword\">endFor</span>");
          }
        case 155: break;
        case 41: 
          { System.out.print("<span class=\"keyword\">free</span>");
          }
        case 156: break;
        case 12: 
          { System.out.print("<span class=\"keyword\">to</span>");
          }
        case 157: break;
        case 45: 
          { System.out.print("<span class=\"type\">array</span>");
          }
        case 158: break;
        case 29: 
          { System.out.print("<span class=\"keyword\">else</span>");
          }
        case 159: break;
        case 84: 
          { System.out.print("<span class=\"keyword\">messages</span>");
          }
        case 160: break;
        case 83: 
          { System.out.print("<span class=\"keyword\">function</span>");
          }
        case 161: break;
        case 34: 
          { System.out.print("<span class=\"keyword\">code</span>");
          }
        case 162: break;
        case 87: 
          { System.out.print("<span class=\"keyword\">endMethod</span>");
          }
        case 163: break;
        case 1: 
          { System.out.print(yytext());
          }
        case 164: break;
        case 75: 
          { System.out.print("<span class=\"keyword\">methods</span>");
          }
        case 165: break;
        case 31: 
          { System.out.print("<span class=\"keyword\">type</span>");
          }
        case 166: break;
        case 44: 
          { System.out.print("<span class=\"keyword\">alloc</span>");
          }
        case 167: break;
        case 60: 
          { System.out.print("<span class=\"keyword\">prefix</span>");
          }
        case 168: break;
        case 82: 
          { System.out.print("<span class=\"keyword\">behavior</span>");
          }
        case 169: break;
        case 11: 
          { System.out.print("</span>\n" + (yyline+2));
                          if ((yyline+2) < 10)
                              System.out.print("    ");
                          else if ((yyline+2) < 100)
                              System.out.print("   ");
                          else if ((yyline+2) < 1000)
                              System.out.print("  ");
                          else
                              System.out.print(" ");
                          System.out.print("<span class=\"comment\">");
          }
        case 170: break;
        case 79: 
          { System.out.print("<span class=\"keyword\">continue</span>");
          }
        case 171: break;
        case 3: 
          { System.out.print("<span class=\"number\">" + yytext() + "</span>");
          }
        case 172: break;
        case 16: 
          { System.out.print("<span class=\"keyword\">do</span>");
          }
        case 173: break;
        case 57: 
          { System.out.print("<span class=\"keyword\">endTry</span>");
          }
        case 174: break;
        case 26: 
          { System.out.print("<span class=\"type\">int</span>");
          }
        case 175: break;
        case 49: 
          { System.out.print("<span class=\"keyword\">infix</span>");
          }
        case 176: break;
        case 69: 
          { System.out.print("<span class=\"keyword\">extends</span>");
          }
        case 177: break;
        case 24: 
          { System.out.print("<span class=\"keyword\">new</span>");
          }
        case 178: break;
        case 48: 
          { System.out.print("<span class=\"type\">const</span>");
          }
        case 179: break;
        case 40: 
          { System.out.print("<span class=\"keyword\">uses</span>");
          }
        case 180: break;
        case 91: 
          { System.out.print("<span class=\"keyword\">interface</span>");
          }
        case 181: break;
        case 56: 
          { System.out.print("<span class=\"keyword\">elseIf</span>");
          }
        case 182: break;
        case 13: 
          { System.out.print("<span class=\"keyword\">of</span>");
          }
        case 183: break;
        case 93: 
          { System.out.print("<span class=\"keyword\">typeOfNull</span>");
          }
        case 184: break;
        case 36: 
          { System.out.print("<span class=\"keyword\">null</span>");
          }
        case 185: break;
        case 9: 
          { System.out.print("<span class=\"invalid\">" + yytext() + "</span>");
          }
        case 186: break;
        case 32: 
          { System.out.print("<span class=\"keyword\">true</span>");
          }
        case 187: break;
        case 54: 
          { System.out.print("<span class=\"keyword\">false</span>");
          }
        case 188: break;
        case 28: 
          { System.out.print("<span class=\"keyword\">for</span>");
          }
        case 189: break;
        case 53: 
          { System.out.print("<span class=\"keyword\">until</span>");
          }
        case 190: break;
        case 21: 
          { System.out.print("<span class=\"escape\">" + yytext() + "</span>");
          }
        case 191: break;
        case 77: 
          { System.out.print("<span class=\"keyword\">endClass</span>");
          }
        case 192: break;
        case 74: 
          { System.out.print("<span class=\"keyword\">default</span>");
          }
        case 193: break;
        case 78: 
          { System.out.print("<span class=\"keyword\">endWhile</span>");
          }
        case 194: break;
        case 37: 
          { System.out.print("<span class=\"keyword\">self</span>");
          }
        case 195: break;
        case 51: 
          { System.out.print("<span class=\"keyword\">break</span>");
          }
        case 196: break;
        case 97: 
          { System.out.print("<span class=\"keyword\">endFunction</span>");
          }
        case 197: break;
        case 65: 
          { System.out.print("<span class=\"keyword\">header</span>");
          }
        case 198: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              { 		System.out.println("</body>");
		System.out.println("</html>");

		return 0;
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java KPLColor <inputfile>");
    }
    else {
      for (int i = 0; i < argv.length; i++) {
        KPLColor scanner = null;
        try {
          scanner = new KPLColor( new java.io.FileReader(argv[i]) );
          while ( !scanner.zzAtEOF ) scanner.nextToken();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
